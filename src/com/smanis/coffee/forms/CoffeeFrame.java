/*
 */
package com.smanis.coffee.forms;

import com.smanis.coffee.AppPreferences;
import com.smanis.coffee.models.NonEditableTableModel;
import com.smanis.coffee.service.TableService;
import com.smanis.coffee.Utility;
import com.smanis.coffee.models.BeanModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author semanis
 */
public class CoffeeFrame extends javax.swing.JFrame {

    /**
     * Creates new form CoffeeFrame
     */
    public CoffeeFrame() {
        initComponents();
        initOther();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabbedPanel = new javax.swing.JTabbedPane();
        panelRoastLogs = new javax.swing.JPanel();
        panelRoastTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listBeans = new javax.swing.JList<>();
        panelRoastLogTable = new javax.swing.JPanel();
        panelTableHeader = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textDensity = new javax.swing.JTextField();
        scrollPaneRoasts = new javax.swing.JScrollPane();
        tableRoasts = new javax.swing.JTable();
        panelNotes = new javax.swing.JPanel();
        labelRoastNotes = new javax.swing.JLabel();
        labelTastingNotes = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        textRoastNotes = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        textTastingNotes = new javax.swing.JTextArea();
        panelButtonsRoastLog = new javax.swing.JPanel();
        btnAddRoastLog = new javax.swing.JButton();
        btnEditRoastLog = new javax.swing.JButton();
        btnDeleteRoastLog = new javax.swing.JButton();
        panelBeans = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBeans = new javax.swing.JTable();
        panelComments = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaComments = new javax.swing.JTextArea();
        panelButtonsBean = new javax.swing.JPanel();
        btnAddBean = new javax.swing.JButton();
        btnEditBean = new javax.swing.JButton();
        btnDeleteBean = new javax.swing.JButton();
        panelPurchases = new javax.swing.JPanel();
        buttonExit = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuLookAndFeel = new javax.swing.JMenu();
        menuItemGtk = new javax.swing.JMenuItem();
        menuItemMetal = new javax.swing.JMenuItem();
        menuItemMotif = new javax.swing.JMenuItem();
        menuItemNimbus = new javax.swing.JMenuItem();
        menuItemWindows = new javax.swing.JMenuItem();
        menuItemWindowsClassic = new javax.swing.JMenuItem();
        menuHellp = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Coffee Roasting Log");
        setName("roastLogs"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelRoastLogs.setLayout(new java.awt.GridBagLayout());

        panelRoastTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelRoastTable.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(403, 3));

        listBeans.setModel(TableService.getInstance().getListModelBeans()  );
        listBeans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listBeansMouseClicked(evt);
            }
        });
        listBeans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listBeansKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(listBeans);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelRoastTable.add(jScrollPane1, gridBagConstraints);

        panelRoastLogTable.setLayout(new java.awt.GridBagLayout());

        panelTableHeader.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Density:");
        panelTableHeader.add(jLabel1);

        textDensity.setText("  ");
        textDensity.setFocusable(false);
        textDensity.setPreferredSize(new java.awt.Dimension(77, 26));
        panelTableHeader.add(textDensity);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelRoastLogTable.add(panelTableHeader, gridBagConstraints);

        scrollPaneRoasts.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scrollPaneRoasts.setAutoscrolls(true);

        tableRoasts.setAutoCreateRowSorter(true);
        tableRoasts.setModel(new DefaultTableModel());
        tableRoasts.setName(""); // NOI18N
        tableRoasts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableRoasts.setShowGrid(true);
        tableRoasts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClick(evt);
            }
        });
        tableRoasts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableRoastsKeyReleased(evt);
            }
        });
        scrollPaneRoasts.setViewportView(tableRoasts);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        panelRoastLogTable.add(scrollPaneRoasts, gridBagConstraints);

        panelNotes.setBorder(javax.swing.BorderFactory.createTitledBorder(" Notes "));
        panelNotes.setLayout(new java.awt.GridBagLayout());

        labelRoastNotes.setText("Roasting");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        panelNotes.add(labelRoastNotes, gridBagConstraints);

        labelTastingNotes.setText("Tasting");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        panelNotes.add(labelTastingNotes, gridBagConstraints);

        textRoastNotes.setEditable(false);
        textRoastNotes.setColumns(20);
        textRoastNotes.setRows(5);
        jScrollPane6.setViewportView(textRoastNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panelNotes.add(jScrollPane6, gridBagConstraints);

        textTastingNotes.setEditable(false);
        textTastingNotes.setColumns(20);
        textTastingNotes.setRows(5);
        jScrollPane7.setViewportView(textTastingNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelNotes.add(jScrollPane7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelRoastLogTable.add(panelNotes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelRoastTable.add(panelRoastLogTable, gridBagConstraints);

        panelButtonsRoastLog.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        btnAddRoastLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/addSmall.png"))); // NOI18N
        btnAddRoastLog.setMnemonic('a');
        btnAddRoastLog.setText("Add");
        btnAddRoastLog.setMaximumSize(new java.awt.Dimension(121, 34));
        btnAddRoastLog.setMinimumSize(new java.awt.Dimension(121, 34));
        btnAddRoastLog.setPreferredSize(new java.awt.Dimension(121, 34));
        btnAddRoastLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoastLogActionPerformed(evt);
            }
        });
        panelButtonsRoastLog.add(btnAddRoastLog);

        btnEditRoastLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/editSmall.png"))); // NOI18N
        btnEditRoastLog.setMnemonic('e');
        btnEditRoastLog.setText("Edit");
        btnEditRoastLog.setMaximumSize(new java.awt.Dimension(121, 34));
        btnEditRoastLog.setMinimumSize(new java.awt.Dimension(121, 34));
        btnEditRoastLog.setPreferredSize(new java.awt.Dimension(121, 34));
        btnEditRoastLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRoastLogActionPerformed(evt);
            }
        });
        panelButtonsRoastLog.add(btnEditRoastLog);

        btnDeleteRoastLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/deleteSmall.png"))); // NOI18N
        btnDeleteRoastLog.setMnemonic('d');
        btnDeleteRoastLog.setText("Delete");
        btnDeleteRoastLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoastLogActionPerformed(evt);
            }
        });
        panelButtonsRoastLog.add(btnDeleteRoastLog);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panelRoastTable.add(panelButtonsRoastLog, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        panelRoastLogs.add(panelRoastTable, gridBagConstraints);

        tabbedPanel.addTab(" Roast Logs ", panelRoastLogs);

        panelBeans.setLayout(new java.awt.GridBagLayout());

        tableBeans.setModel(TableService.getInstance().getTableModelBeans());
        tableBeans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBeansMouseClicked(evt);
            }
        });
        tableBeans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableBeansKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableBeans);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelBeans.add(jScrollPane2, gridBagConstraints);

        panelComments.setBorder(javax.swing.BorderFactory.createTitledBorder(" Comments "));
        panelComments.setLayout(new java.awt.GridBagLayout());

        textAreaComments.setColumns(20);
        textAreaComments.setRows(5);
        jScrollPane5.setViewportView(textAreaComments);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelComments.add(jScrollPane5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBeans.add(panelComments, gridBagConstraints);

        panelButtonsBean.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        btnAddBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/addSmall.png"))); // NOI18N
        btnAddBean.setMnemonic('a');
        btnAddBean.setText("Add");
        btnAddBean.setMaximumSize(new java.awt.Dimension(121, 34));
        btnAddBean.setMinimumSize(new java.awt.Dimension(121, 34));
        btnAddBean.setPreferredSize(new java.awt.Dimension(121, 34));
        btnAddBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBeanActionPerformed(evt);
            }
        });
        panelButtonsBean.add(btnAddBean);

        btnEditBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/editSmall.png"))); // NOI18N
        btnEditBean.setMnemonic('e');
        btnEditBean.setText("Edit");
        btnEditBean.setMaximumSize(new java.awt.Dimension(121, 34));
        btnEditBean.setMinimumSize(new java.awt.Dimension(121, 34));
        btnEditBean.setPreferredSize(new java.awt.Dimension(121, 34));
        btnEditBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBeanActionPerformed(evt);
            }
        });
        panelButtonsBean.add(btnEditBean);

        btnDeleteBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/deleteSmall.png"))); // NOI18N
        btnDeleteBean.setMnemonic('d');
        btnDeleteBean.setText("Delete");
        btnDeleteBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBeanActionPerformed(evt);
            }
        });
        panelButtonsBean.add(btnDeleteBean);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelBeans.add(panelButtonsBean, gridBagConstraints);

        tabbedPanel.addTab("    Beans    ", panelBeans);
        tabbedPanel.addTab(" Bean Purchases ", panelPurchases);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(tabbedPanel, gridBagConstraints);

        buttonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/exitSmall.png"))); // NOI18N
        buttonExit.setMnemonic('x');
        buttonExit.setText("Exit");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(buttonExit, gridBagConstraints);

        menuFile.setMnemonic('f');
        menuFile.setText("File");
        menuFile.add(jSeparator1);

        menuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/exitSmall.png"))); // NOI18N
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuView.setMnemonic('v');
        menuView.setText("View");

        menuLookAndFeel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/glasses.png"))); // NOI18N
        menuLookAndFeel.setMnemonic('L');
        menuLookAndFeel.setText("Look And Feel");

        menuItemGtk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/tux.png"))); // NOI18N
        menuItemGtk.setText("GTK");
        menuItemGtk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGtkActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemGtk);

        menuItemMetal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/anvil.png"))); // NOI18N
        menuItemMetal.setText("Metal");
        menuItemMetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMetalActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemMetal);

        menuItemMotif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/motif.png"))); // NOI18N
        menuItemMotif.setText("Motif");
        menuItemMotif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMotifActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemMotif);

        menuItemNimbus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/nimbus.png"))); // NOI18N
        menuItemNimbus.setText("Nimbus");
        menuItemNimbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNimbusActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemNimbus);

        menuItemWindows.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/windows.png"))); // NOI18N
        menuItemWindows.setText("Windows");
        menuItemWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemWindowsActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemWindows);

        menuItemWindowsClassic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/windowsClassic.png"))); // NOI18N
        menuItemWindowsClassic.setText("Windows Classic");
        menuItemWindowsClassic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemWindowsClassicActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemWindowsClassic);

        menuView.add(menuLookAndFeel);

        menuBar.add(menuView);

        menuHellp.setMnemonic('h');
        menuHellp.setText("Help");

        menuItemAbout.setText("About...");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHellp.add(menuItemAbout);

        menuBar.add(menuHellp);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        this.exitForm(null);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        AppPreferences.saveWindowPreferences(this);
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void tableMouseClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClick
        int row = this.tableRoasts.rowAtPoint(evt.getPoint());
        NonEditableTableModel model = (NonEditableTableModel) this.tableRoasts.getModel();

        // on double-click of a row,  open the editing dialog.
        if (evt.getClickCount() == 2) {
            this.editRoastLog(model, row);
        } else {
            // refresh roast notes/tasting nodes based on the clicked row.
            this.populateNotes(model, row);
        }

    }//GEN-LAST:event_tableMouseClick

    private void menuItemGtkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGtkActionPerformed
        Utility.setLookAndFeel("gtk", this);

    }//GEN-LAST:event_menuItemGtkActionPerformed

    private void menuItemMotifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMotifActionPerformed
        Utility.setLookAndFeel("motif", this);
    }//GEN-LAST:event_menuItemMotifActionPerformed

    private void menuItemWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemWindowsActionPerformed
        Utility.setLookAndFeel("windows", this);

    }//GEN-LAST:event_menuItemWindowsActionPerformed

    private void menuItemMetalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMetalActionPerformed
        Utility.setLookAndFeel("metal", this);

    }//GEN-LAST:event_menuItemMetalActionPerformed

    private void menuItemNimbusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNimbusActionPerformed
        Utility.setLookAndFeel("nimbus", this);
    }//GEN-LAST:event_menuItemNimbusActionPerformed

    private void menuItemWindowsClassicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemWindowsClassicActionPerformed
        Utility.setLookAndFeel("windowsclassic", this);
    }//GEN-LAST:event_menuItemWindowsClassicActionPerformed

    private void btnEditRoastLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRoastLogActionPerformed
        int selectedRow = this.tableRoasts.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a Roast Log to edit.");
            return;
        }

        NonEditableTableModel model = (NonEditableTableModel) this.tableRoasts.getModel();
        String roastLogId = (String) model.getValueAt(selectedRow, 0);
        RoastLogEdit rle = new com.smanis.coffee.forms.RoastLogEdit(this, true);
        rle.setRoastLogId(roastLogId);
        rle.setVisible(true);

        if (rle.wasUpdated == true) {
            this.refreshRoastLogTable();
            this.tableRoasts.setRowSelectionInterval(selectedRow, selectedRow);
        }

        rle.dispose();
    }//GEN-LAST:event_btnEditRoastLogActionPerformed

    private void btnAddRoastLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoastLogActionPerformed
        RoastLogEdit rle = new com.smanis.coffee.forms.RoastLogEdit(this, true);
        rle.setVisible(true);

        if (rle.wasInserted == true) {
            this.refreshRoastLogTable();
        }

        rle.dispose();

    }//GEN-LAST:event_btnAddRoastLogActionPerformed

    private void btnDeleteRoastLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoastLogActionPerformed
        int selectedRow = this.tableRoasts.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a Roast Log to delete.");
            return;
        }

        NonEditableTableModel model = (NonEditableTableModel) this.tableRoasts.getModel();
        String roastLogId = (String) model.getValueAt(selectedRow, 0);

        if (JOptionPane.showConfirmDialog(this, "Delete Roast Log?", "Confirm Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION) {
            return;
        }

        try {
            TableService.getInstance().deleteRoastLog(roastLogId);
            this.refreshRoastLogTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnDeleteRoastLogActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        this.exitForm(null);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void tableRoastsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableRoastsKeyReleased
        int currentRow = this.tableRoasts.getSelectedRow();
        this.populateNotes((NonEditableTableModel) this.tableRoasts.getModel(), currentRow);
    }//GEN-LAST:event_tableRoastsKeyReleased

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void listBeansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listBeansMouseClicked
        this.refreshRoastLogTable();

    }//GEN-LAST:event_listBeansMouseClicked

    private void listBeansKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listBeansKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DefaultListModel listModel = (DefaultListModel) this.listBeans.getModel();
            BeanModel beanModel = (BeanModel) listModel.getElementAt(this.listBeans.getSelectedIndex());
            this.textDensity.setText(beanModel.getBeanDensity());
            this.refreshRoastLogTable();
        }
    }//GEN-LAST:event_listBeansKeyPressed

    private void tableBeansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBeansMouseClicked
        // on double-click of a row,  open the editing dialog.
        if (evt.getClickCount() == 2) {
            this.editBean();
        }

    }//GEN-LAST:event_tableBeansMouseClicked

    private void btnAddBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBeanActionPerformed

    }//GEN-LAST:event_btnAddBeanActionPerformed

    private void btnEditBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBeanActionPerformed
        this.editBean();
    }//GEN-LAST:event_btnEditBeanActionPerformed

    private void btnDeleteBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBeanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteBeanActionPerformed

    private void tableBeansKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableBeansKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {

            this.editBean();
        }
    }//GEN-LAST:event_tableBeansKeyPressed

    private void editBean() {
        int selectedRow = this.tableBeans.getSelectedRow();

        String beanId = (String) this.tableBeans.getModel().getValueAt(selectedRow, 0); // Id is always column zero.

        BeanEdit dialog = new com.smanis.coffee.forms.BeanEdit(this, true);

        dialog.setBeanId(beanId);
        dialog.setVisible(true);

        if (dialog.wasPersisted == true) {
            this.refreshBeanTable();
            this.tableBeans.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }

    private void editRoastLog(NonEditableTableModel model, int tableRow) {
        String roastLogId = (String) model.getValueAt(tableRow, 0);

        RoastLogEdit rle = new com.smanis.coffee.forms.RoastLogEdit(this, true);
        rle.setRoastLogId(roastLogId); // set the roast log Id to be edited.
        rle.setVisible(true);

        if (rle.wasPersisted == true) {
            this.refreshRoastLogTable();
        }
    }

    private void populateNotes(NonEditableTableModel model, int tableRow) {
        // refresh roast notes/tasting nodes based on the clicked row.
        this.textRoastNotes.setText((String) model.getValueAt(tableRow, TableService.getInstance().getColumnIndex("RoastLog", "Roast Notes")));
        this.textTastingNotes.setText((String) model.getValueAt(tableRow, TableService.getInstance().getColumnIndex("RoastLog", "Tasting Notes")));
    }

    private void refreshBeanTable() {
        // Populate the roast log table for the specified bean ID.
        NonEditableTableModel model = TableService.getInstance().getTableModelBeans();
        this.tableBeans.setModel(model);

        // General table layout stuff, column widths, hidden columns, etc.
        TableService.getInstance().setupTableBeans(this.tableBeans);
    }

    private void refreshRoastLogTable() {
        int currentIndex = this.listBeans.getSelectedIndex();

        // Get the first bean ID from the bean selection combobox.
        DefaultListModel listModel = (DefaultListModel) this.listBeans.getModel();
        BeanModel beanModel = (BeanModel) listModel.getElementAt(currentIndex);
        String beanId = beanModel.getBeanId();
        this.textDensity.setText(beanModel.getBeanDensity());

        // Populate the roast log table for the specified bean ID.
        NonEditableTableModel model = TableService.getInstance().getTableModelRoastLogsByBeanId(beanId);
        this.tableRoasts.setModel(model);

        // General table layout stuff, column widths, hidden columns, etc.
        TableService.getInstance().setupTableRoastLog(this.tableRoasts, this.textRoastNotes, this.textTastingNotes);

        this.listBeans.setSelectedIndex(currentIndex);
    }

    private void initOther() {
        try {
            JRootPane jrp = this.getRootPane();

            // register an action listener on the Escape key which performs a click
            // of the Exit button.
            ActionListener actionListener = new ActionListener() {
                public void actionPerformed(ActionEvent actionEvent) {
                    int response = JOptionPane.showConfirmDialog(CoffeeFrame.this, "Exit?", "Confirm Exit", JOptionPane.OK_CANCEL_OPTION);
                    if (response == JOptionPane.OK_OPTION) {
                        buttonExit.doClick();
                    }
                }
            };

            // Register ESCAPE as the keystroke to confirm exiting the program.
            KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
            jrp.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);

            this.tableBeans.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
            this.tableBeans.getActionMap().put("Enter", new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    // This prevents the default action of navigating down on press of ENTER.
                }
            });

            // Load up the window preferences, which restores the size/location of the window.
            AppPreferences.loadWindowPreferences(this);

            // Select the first bean in the list by default.
            this.listBeans.setSelectedIndex(0);

            // Load up the Roast Log JTable with the selected bean.
            this.refreshRoastLogTable();

            // General table layout stuff, column widths, hidden columns, etc.
            TableService.getInstance().setupTableBeans(this.tableBeans);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "CoffeeFrame.initOther() " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        this.tableRoasts.requestFocus();
    }

    public boolean shouldExit = false;

    //protected DefaultTableModel tableModel = new DefaultTableModel();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBean;
    private javax.swing.JButton btnAddRoastLog;
    private javax.swing.JButton btnDeleteBean;
    private javax.swing.JButton btnDeleteRoastLog;
    private javax.swing.JButton btnEditBean;
    private javax.swing.JButton btnEditRoastLog;
    private javax.swing.JButton buttonExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel labelRoastNotes;
    private javax.swing.JLabel labelTastingNotes;
    private javax.swing.JList<String> listBeans;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHellp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemGtk;
    private javax.swing.JMenuItem menuItemMetal;
    private javax.swing.JMenuItem menuItemMotif;
    private javax.swing.JMenuItem menuItemNimbus;
    private javax.swing.JMenuItem menuItemWindows;
    private javax.swing.JMenuItem menuItemWindowsClassic;
    private javax.swing.JMenu menuLookAndFeel;
    private javax.swing.JMenu menuView;
    private javax.swing.JPanel panelBeans;
    private javax.swing.JPanel panelButtonsBean;
    private javax.swing.JPanel panelButtonsRoastLog;
    private javax.swing.JPanel panelComments;
    private javax.swing.JPanel panelNotes;
    private javax.swing.JPanel panelPurchases;
    private javax.swing.JPanel panelRoastLogTable;
    private javax.swing.JPanel panelRoastLogs;
    private javax.swing.JPanel panelRoastTable;
    private javax.swing.JPanel panelTableHeader;
    private javax.swing.JScrollPane scrollPaneRoasts;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTable tableBeans;
    private javax.swing.JTable tableRoasts;
    private javax.swing.JTextArea textAreaComments;
    private javax.swing.JTextField textDensity;
    private javax.swing.JTextArea textRoastNotes;
    private javax.swing.JTextArea textTastingNotes;
    // End of variables declaration//GEN-END:variables
}
