/*
 */
package com.smanis.coffee.forms;

import com.smanis.coffee.AppPreferences;
import com.smanis.coffee.models.NonEditableTableModel;
import com.smanis.coffee.service.TableService;
import com.smanis.coffee.Utility;
import com.smanis.coffee.models.BeanModel;
import com.smanis.coffee.service.DataService;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author semanis
 */
public class CoffeeFrame extends javax.swing.JFrame {

   /**
    * Creates new form CoffeeFrame
    */
   public CoffeeFrame() {
      initComponents();
      initOther();
      
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the
    * Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabbedPane = new javax.swing.JTabbedPane();
        panelRoastLogs = new javax.swing.JPanel();
        panelRoastTable = new javax.swing.JPanel();
        panelBeanList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listBeans = new javax.swing.JList<>();
        panelRoastLogTable = new javax.swing.JPanel();
        panelTableHeader = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textDensity = new javax.swing.JTextField();
        scrollPaneRoasts = new javax.swing.JScrollPane();
        tableRoasts = new javax.swing.JTable();
        panelNotes = new javax.swing.JPanel();
        labelRoastNotes = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textRoastNotes = new javax.swing.JTextArea();
        labelTastingNotes = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textTastingNotes = new javax.swing.JTextArea();
        panelButtonsRoastLog = new javax.swing.JPanel();
        btnAddRoastLog = new javax.swing.JButton();
        btnEditRoastLog = new javax.swing.JButton();
        btnDeleteRoastLog = new javax.swing.JButton();
        panelBeans = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBeans = new javax.swing.JTable();
        panelSummary = new javax.swing.JPanel();
        labelTotalBeans = new javax.swing.JLabel();
        textTotalBeans = new javax.swing.JTextField();
        labelInStock = new javax.swing.JLabel();
        textInStock = new javax.swing.JTextField();
        panelButtonsBean = new javax.swing.JPanel();
        btnAddBean = new javax.swing.JButton();
        btnEditBean = new javax.swing.JButton();
        btnDeleteBean = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuLookAndFeel = new javax.swing.JMenu();
        menuItemGtk = new javax.swing.JMenuItem();
        menuItemMetal = new javax.swing.JMenuItem();
        menuItemMotif = new javax.swing.JMenuItem();
        menuItemNimbus = new javax.swing.JMenuItem();
        menuItemWindows = new javax.swing.JMenuItem();
        menuItemWindowsClassic = new javax.swing.JMenuItem();
        menuHellp = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Coffee Roasting Log");
        setName("roastLogs"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tabbedPane.setFont(new java.awt.Font("Dialog.plain", 0, 24)); // NOI18N

        panelRoastLogs.setLayout(new java.awt.GridBagLayout());

        panelRoastTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelRoastTable.setLayout(new java.awt.GridBagLayout());

        panelBeanList.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 22));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 195));

        listBeans.setModel(TableService.getInstance().getListModelBeans());
        listBeans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listBeansMouseClicked(evt);
            }
        });
        listBeans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listBeansKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(listBeans);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panelBeanList.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panelRoastTable.add(panelBeanList, gridBagConstraints);

        panelRoastLogTable.setLayout(new java.awt.GridBagLayout());

        panelTableHeader.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        jLabel1.setText("Density:");
        panelTableHeader.add(jLabel1);

        textDensity.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        textDensity.setText("  ");
        textDensity.setFocusable(false);
        textDensity.setMaximumSize(new java.awt.Dimension(77, 2));
        textDensity.setMinimumSize(new java.awt.Dimension(77, 28));
        textDensity.setPreferredSize(new java.awt.Dimension(77, 28));
        panelTableHeader.add(textDensity);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelRoastLogTable.add(panelTableHeader, gridBagConstraints);

        scrollPaneRoasts.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scrollPaneRoasts.setAutoscrolls(true);
        scrollPaneRoasts.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        scrollPaneRoasts.setMaximumSize(new java.awt.Dimension(800, 800));
        scrollPaneRoasts.setMinimumSize(new java.awt.Dimension(800, 800));
        scrollPaneRoasts.setPreferredSize(new java.awt.Dimension(800, 800));

        tableRoasts.setAutoCreateRowSorter(true);
        tableRoasts.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        tableRoasts.setModel(new DefaultTableModel());
        tableRoasts.setName(""); // NOI18N
        tableRoasts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableRoasts.setShowGrid(true);
        tableRoasts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClick(evt);
            }
        });
        tableRoasts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableRoastsKeyReleased(evt);
            }
        });
        scrollPaneRoasts.setViewportView(tableRoasts);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        panelRoastLogTable.add(scrollPaneRoasts, gridBagConstraints);

        panelNotes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Notes ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog.plain", 0, 20))); // NOI18N
        panelNotes.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        panelNotes.setMinimumSize(new java.awt.Dimension(800, 360));
        panelNotes.setPreferredSize(new java.awt.Dimension(800, 360));
        panelNotes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelRoastNotes.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        labelRoastNotes.setText("Roasting");
        panelNotes.add(labelRoastNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jScrollPane4.setMaximumSize(new java.awt.Dimension(450, 160));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(450, 160));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(450, 160));

        textRoastNotes.setEditable(false);
        textRoastNotes.setColumns(20);
        textRoastNotes.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        textRoastNotes.setLineWrap(true);
        textRoastNotes.setRows(5);
        textRoastNotes.setWrapStyleWord(true);
        textRoastNotes.setFocusable(false);
        textRoastNotes.setMinimumSize(new java.awt.Dimension(450, 160));
        textRoastNotes.setPreferredSize(new java.awt.Dimension(450, 160));
        jScrollPane4.setViewportView(textRoastNotes);

        panelNotes.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 380, 240));

        labelTastingNotes.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        labelTastingNotes.setText("Tasting");
        panelNotes.add(labelTastingNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, -1, -1));

        jScrollPane5.setMaximumSize(new java.awt.Dimension(450, 160));
        jScrollPane5.setMinimumSize(new java.awt.Dimension(450, 160));
        jScrollPane5.setPreferredSize(new java.awt.Dimension(450, 160));

        textTastingNotes.setEditable(false);
        textTastingNotes.setColumns(20);
        textTastingNotes.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        textTastingNotes.setLineWrap(true);
        textTastingNotes.setRows(5);
        textTastingNotes.setWrapStyleWord(true);
        textTastingNotes.setFocusable(false);
        textTastingNotes.setMinimumSize(new java.awt.Dimension(450, 160));
        textTastingNotes.setPreferredSize(new java.awt.Dimension(450, 160));
        jScrollPane5.setViewportView(textTastingNotes);

        panelNotes.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 380, 240));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelRoastLogTable.add(panelNotes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelRoastTable.add(panelRoastLogTable, gridBagConstraints);

        panelButtonsRoastLog.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        btnAddRoastLog.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        btnAddRoastLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/addSmall.png"))); // NOI18N
        btnAddRoastLog.setMnemonic('a');
        btnAddRoastLog.setText("Add");
        btnAddRoastLog.setMaximumSize(new java.awt.Dimension(121, 34));
        btnAddRoastLog.setMinimumSize(new java.awt.Dimension(121, 34));
        btnAddRoastLog.setPreferredSize(new java.awt.Dimension(121, 34));
        btnAddRoastLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoastLogActionPerformed(evt);
            }
        });
        panelButtonsRoastLog.add(btnAddRoastLog);

        btnEditRoastLog.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        btnEditRoastLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/editSmall.png"))); // NOI18N
        btnEditRoastLog.setMnemonic('e');
        btnEditRoastLog.setText("Edit");
        btnEditRoastLog.setMaximumSize(new java.awt.Dimension(121, 34));
        btnEditRoastLog.setMinimumSize(new java.awt.Dimension(121, 34));
        btnEditRoastLog.setPreferredSize(new java.awt.Dimension(121, 34));
        btnEditRoastLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRoastLogActionPerformed(evt);
            }
        });
        panelButtonsRoastLog.add(btnEditRoastLog);

        btnDeleteRoastLog.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        btnDeleteRoastLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/deleteSmall.png"))); // NOI18N
        btnDeleteRoastLog.setMnemonic('d');
        btnDeleteRoastLog.setText("Delete");
        btnDeleteRoastLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoastLogActionPerformed(evt);
            }
        });
        panelButtonsRoastLog.add(btnDeleteRoastLog);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panelRoastTable.add(panelButtonsRoastLog, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        panelRoastLogs.add(panelRoastTable, gridBagConstraints);

        tabbedPane.addTab(" Roast Logs ", panelRoastLogs);

        panelBeans.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N

        tableBeans.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        tableBeans.setModel(TableService.getInstance().getTableModelBeans());
        tableBeans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBeansMouseClicked(evt);
            }
        });
        tableBeans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableBeansKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableBeans);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelBeans.add(jScrollPane2, gridBagConstraints);

        panelSummary.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelTotalBeans.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalBeans.setText("Total Beans:");
        panelSummary.add(labelTotalBeans, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 150, -1));

        textTotalBeans.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textTotalBeans.setText(" ");
        textTotalBeans.setEnabled(false);
        textTotalBeans.setFocusable(false);
        textTotalBeans.setMinimumSize(new java.awt.Dimension(50, 26));
        textTotalBeans.setPreferredSize(new java.awt.Dimension(50, 26));
        panelSummary.add(textTotalBeans, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, 60, -1));

        labelInStock.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelInStock.setText("In Stock:");
        panelSummary.add(labelInStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 110, -1));

        textInStock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textInStock.setEnabled(false);
        textInStock.setFocusable(false);
        textInStock.setMinimumSize(new java.awt.Dimension(50, 26));
        textInStock.setPreferredSize(new java.awt.Dimension(50, 26));
        panelSummary.add(textInStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 60, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panelBeans.add(panelSummary, gridBagConstraints);

        panelButtonsBean.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        btnAddBean.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        btnAddBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/addSmall.png"))); // NOI18N
        btnAddBean.setMnemonic('a');
        btnAddBean.setText("Add");
        btnAddBean.setMaximumSize(new java.awt.Dimension(121, 34));
        btnAddBean.setMinimumSize(new java.awt.Dimension(121, 34));
        btnAddBean.setPreferredSize(new java.awt.Dimension(121, 34));
        btnAddBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBeanActionPerformed(evt);
            }
        });
        panelButtonsBean.add(btnAddBean);

        btnEditBean.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        btnEditBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/editSmall.png"))); // NOI18N
        btnEditBean.setMnemonic('e');
        btnEditBean.setText("Edit");
        btnEditBean.setMaximumSize(new java.awt.Dimension(121, 34));
        btnEditBean.setMinimumSize(new java.awt.Dimension(121, 34));
        btnEditBean.setPreferredSize(new java.awt.Dimension(121, 34));
        btnEditBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBeanActionPerformed(evt);
            }
        });
        panelButtonsBean.add(btnEditBean);

        btnDeleteBean.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        btnDeleteBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/deleteSmall.png"))); // NOI18N
        btnDeleteBean.setMnemonic('d');
        btnDeleteBean.setText("Delete");
        btnDeleteBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBeanActionPerformed(evt);
            }
        });
        panelButtonsBean.add(btnDeleteBean);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelBeans.add(panelButtonsBean, gridBagConstraints);

        tabbedPane.addTab("    Beans    ", panelBeans);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(tabbedPane, gridBagConstraints);

        buttonExit.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        buttonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/exitSmall.png"))); // NOI18N
        buttonExit.setMnemonic('x');
        buttonExit.setText("Exit");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(buttonExit, gridBagConstraints);

        menuBar.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N

        menuFile.setMnemonic('f');
        menuFile.setText("File");
        menuFile.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuFile.add(jSeparator1);

        menuItemExit.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/exitSmall.png"))); // NOI18N
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuView.setMnemonic('v');
        menuView.setText("View");
        menuView.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N

        menuLookAndFeel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/glasses.png"))); // NOI18N
        menuLookAndFeel.setMnemonic('L');
        menuLookAndFeel.setText("Look And Feel");
        menuLookAndFeel.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N

        menuItemGtk.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemGtk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/tux.png"))); // NOI18N
        menuItemGtk.setText("GTK");
        menuItemGtk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGtkActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemGtk);

        menuItemMetal.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemMetal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/anvil.png"))); // NOI18N
        menuItemMetal.setText("Metal");
        menuItemMetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMetalActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemMetal);

        menuItemMotif.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemMotif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/motif.png"))); // NOI18N
        menuItemMotif.setText("Motif");
        menuItemMotif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMotifActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemMotif);

        menuItemNimbus.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemNimbus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/nimbus.png"))); // NOI18N
        menuItemNimbus.setText("Nimbus");
        menuItemNimbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNimbusActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemNimbus);

        menuItemWindows.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemWindows.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/windows.png"))); // NOI18N
        menuItemWindows.setText("Windows");
        menuItemWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemWindowsActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemWindows);

        menuItemWindowsClassic.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemWindowsClassic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/smanis/coffee/assets/windowsClassic.png"))); // NOI18N
        menuItemWindowsClassic.setText("Windows Classic");
        menuItemWindowsClassic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemWindowsClassicActionPerformed(evt);
            }
        });
        menuLookAndFeel.add(menuItemWindowsClassic);

        menuView.add(menuLookAndFeel);

        menuBar.add(menuView);

        menuHellp.setMnemonic('h');
        menuHellp.setText("Help");
        menuHellp.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N

        menuItemAbout.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
        menuItemAbout.setText("About...");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHellp.add(menuItemAbout);

        menuBar.add(menuHellp);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
      this.exitForm(null);
    }//GEN-LAST:event_buttonExitActionPerformed
   
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      AppPreferences.saveWindowPreferences(this);
      this.dispose();
      System.exit(0);
    }//GEN-LAST:event_exitForm
   
    private void tableMouseClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClick
      int row = this.tableRoasts.rowAtPoint(evt.getPoint());
      NonEditableTableModel model = (NonEditableTableModel) this.tableRoasts.getModel();

      // on double-click of a row,  open the editing dialog.
      if (evt.getClickCount() == 2) {
         this.editRoastLog(model, row);
      } else {
         // refresh roast notes/tasting nodes based on the clicked row.
         this.populateNotes(model, row);
      }
      
    }//GEN-LAST:event_tableMouseClick
   
    private void menuItemGtkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGtkActionPerformed
      Utility.setLookAndFeel("gtk", this);
      
    }//GEN-LAST:event_menuItemGtkActionPerformed
   
    private void menuItemMotifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMotifActionPerformed
      Utility.setLookAndFeel("motif", this);
    }//GEN-LAST:event_menuItemMotifActionPerformed
   
    private void menuItemWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemWindowsActionPerformed
      Utility.setLookAndFeel("windows", this);
      
    }//GEN-LAST:event_menuItemWindowsActionPerformed
   
    private void menuItemMetalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMetalActionPerformed
      Utility.setLookAndFeel("metal", this);
      
    }//GEN-LAST:event_menuItemMetalActionPerformed
   
    private void menuItemNimbusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNimbusActionPerformed
      Utility.setLookAndFeel("nimbus", this);
    }//GEN-LAST:event_menuItemNimbusActionPerformed
   
    private void menuItemWindowsClassicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemWindowsClassicActionPerformed
      Utility.setLookAndFeel("windowsclassic", this);
    }//GEN-LAST:event_menuItemWindowsClassicActionPerformed
   
    private void btnEditRoastLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRoastLogActionPerformed
      ListModel beanListModel = this.listBeans.getModel();
      BeanModel beanModel = (BeanModel) beanListModel.getElementAt(this.listBeans.getSelectedIndex());
      
      int selectedRow = this.tableRoasts.getSelectedRow();
      
      if (selectedRow == -1) {
         JOptionPane.showMessageDialog(this, "Please select a Roast Log to edit.");
         return;
      }
      
      NonEditableTableModel model = (NonEditableTableModel) this.tableRoasts.getModel();
      String roastLogId = (String) model.getValueAt(selectedRow, 0);
      
      RoastLogEdit rle = new com.smanis.coffee.forms.RoastLogEdit(this, true);
      rle.setRoastLogId(roastLogId);
      rle.setBeanModel(beanModel);
      rle.setVisible(true);
      
      if (rle.wasUpdated == true) {
         this.refreshRoastLogTable();
         this.tableRoasts.setRowSelectionInterval(selectedRow, selectedRow);
      }
      
      rle.dispose();
    }//GEN-LAST:event_btnEditRoastLogActionPerformed
   
    private void btnAddRoastLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoastLogActionPerformed
      ListModel beanListModel = this.listBeans.getModel();
      BeanModel beanModel = (BeanModel) beanListModel.getElementAt(this.listBeans.getSelectedIndex());
      
      RoastLogEdit rle = new com.smanis.coffee.forms.RoastLogEdit(this, true);
      rle.setBeanModel(beanModel);
      rle.setRoastStartDate(new Date());
      rle.setGreenWeight("250.0");
      rle.setVisible(true);
      
      if (rle.wasInserted == true) {
         this.refreshRoastLogTable();
      }
      
      rle.dispose();
      
    }//GEN-LAST:event_btnAddRoastLogActionPerformed
   
    private void btnDeleteRoastLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoastLogActionPerformed
      int selectedRow = this.tableRoasts.getSelectedRow();
      
      if (selectedRow == -1) {
         JOptionPane.showMessageDialog(this, "Please select a Roast Log to delete.");
         return;
      }
      
      NonEditableTableModel model = (NonEditableTableModel) this.tableRoasts.getModel();
      String roastLogId = (String) model.getValueAt(selectedRow, 0);
      
      if (JOptionPane.showConfirmDialog(this, "Delete Roast Log?", "Confirm Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION) {
         return;
      }
      
      try {
         TableService.getInstance().deleteRoastLog(roastLogId);
         this.refreshRoastLogTable();
      } catch (Exception ex) {
         JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
      
    }//GEN-LAST:event_btnDeleteRoastLogActionPerformed
   
    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
      this.exitForm(null);
    }//GEN-LAST:event_menuItemExitActionPerformed
   
    private void tableRoastsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableRoastsKeyReleased
      int keyCode = evt.getKeyCode();
      if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_ENTER) {
         Runnable runner = () -> {
            int currentRow = this.tableRoasts.getSelectedRow();

            // If no roasts for bean yet, table is empty, so no selected row.
            if (currentRow == -1) {
               this.textRoastNotes.setText("");
            } else {
               this.populateNotes((NonEditableTableModel) this.tableRoasts.getModel(), currentRow);
            }
         };
         SwingUtilities.invokeLater(runner);
      }
    }//GEN-LAST:event_tableRoastsKeyReleased
   
    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
      new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_menuItemAboutActionPerformed
   
    private void tableBeansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBeansMouseClicked
      // on double-click of a row,  open the editing dialog.
      if (evt.getClickCount() == 2) {
         this.editBean();
      }
      
    }//GEN-LAST:event_tableBeansMouseClicked
   
    private void btnAddBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBeanActionPerformed
      BeanEdit dialog = new com.smanis.coffee.forms.BeanEdit(this, true);
      dialog.setVisible(true);
      
      if (dialog.wasPersisted == true) {
         this.refreshBeanTable(dialog.getNewBeanId());
      }
    }//GEN-LAST:event_btnAddBeanActionPerformed
   
    private void btnEditBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBeanActionPerformed
      this.editBean();
    }//GEN-LAST:event_btnEditBeanActionPerformed
   
    private void btnDeleteBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBeanActionPerformed
      int selectedRow = this.tableBeans.getSelectedRow();
      
      if (selectedRow == -1) {
         JOptionPane.showMessageDialog(this, "Please select a Bean to delete.");
         return;
      }
      
      NonEditableTableModel model = (NonEditableTableModel) this.tableBeans.getModel();
      String beanId = (String) model.getValueAt(selectedRow, 0);
      String beanName = (String) model.getValueAt(selectedRow, TableService.getInstance().getColumnIndex("Beans", "Name"));
      
      if (JOptionPane.showConfirmDialog(this, "Delete Bean '" + beanName + "'?", "Confirm Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION) {
         return;
      }
      
      try {
         TableService.getInstance().deleteBean(beanId);
         this.refreshBeanTable(null);
      } catch (Exception ex) {
         JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
    }//GEN-LAST:event_btnDeleteBeanActionPerformed
   
    private void tableBeansKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableBeansKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
         this.editBean();
      }
    }//GEN-LAST:event_tableBeansKeyPressed
   
    private void listBeansKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listBeansKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
         DefaultListModel listModel = (DefaultListModel) this.listBeans.getModel();
         BeanModel beanModel = (BeanModel) listModel.getElementAt(this.listBeans.getSelectedIndex());
         this.textDensity.setText(beanModel.getBeanDensity());
         this.refreshRoastLogTable();
      }
    }//GEN-LAST:event_listBeansKeyPressed
   
    private void listBeansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listBeansMouseClicked
      this.refreshRoastLogTable();
    }//GEN-LAST:event_listBeansMouseClicked
   
   private void editBean() {
      int selectedRow = this.tableBeans.getSelectedRow();
      
      String beanId = (String) this.tableBeans.getModel().getValueAt(selectedRow, 0); // Id is always column zero.

      BeanEdit dialog = new com.smanis.coffee.forms.BeanEdit(this, true);
      
      dialog.setBeanId(beanId);
      dialog.setVisible(true);
      
      if (dialog.wasPersisted == true) {
         this.refreshBeanTable(null);
         this.tableBeans.setRowSelectionInterval(selectedRow, selectedRow);
      }
   }
   
   private void editRoastLog(NonEditableTableModel model, int tableRow) {
      ListModel beanListModel = this.listBeans.getModel();
      BeanModel beanModel = (BeanModel) beanListModel.getElementAt(this.listBeans.getSelectedIndex());
      
      String roastLogId = (String) model.getValueAt(tableRow, 0);
      
      RoastLogEdit rle = new com.smanis.coffee.forms.RoastLogEdit(this, true);
      rle.setRoastLogId(roastLogId); // set the roast log Id to be edited.
      rle.setBeanModel(beanModel);
      rle.setVisible(true);
      
      if (rle.wasUpdated == true) {
         this.refreshRoastLogTable();
      }
   }
   
   private void getBeanTotals() {
      try {
         ResultSet rs = DataService.getInstance().getBeanCounts();
         if (rs.next()) {
            this.textTotalBeans.setText(String.valueOf(rs.getInt("TotalBeans")));
            this.textInStock.setText(String.valueOf(rs.getInt("TotalInStock")));
         }
         
      } catch (Exception e) {
         JOptionPane.showMessageDialog(this, "CoffeeFrame.getBeanTotals() " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         e.printStackTrace();
      }
   }
   
   private void populateNotes(NonEditableTableModel model, int tableRow) {
      // refresh roast notes/tasting nodes based on the clicked row.
      this.textRoastNotes.setText((String) model.getValueAt(tableRow, TableService.getInstance().getColumnIndex("RoastLog", "Roast Notes")));
      this.textTastingNotes.setText((String) model.getValueAt(tableRow, TableService.getInstance().getColumnIndex("RoastLog", "Tasting Notes")));
   }
   
   private void refreshBeanTable(String beanId) {
      // Populate the roast log table for the specified bean ID.
      NonEditableTableModel model = TableService.getInstance().getTableModelBeans();
      this.tableBeans.setModel(model);

      // General table layout stuff, column widths, hidden columns, etc.
      TableService.getInstance().setupTableBeans(this.tableBeans);

      // If beanId was passed, make it the selected row in the bean table.
      if (beanId != null) {
         int rowCount = model.getRowCount();
         String tableRowId = null;
         
         for (int i = 0; i < rowCount; i++) {
            tableRowId = (String) model.getValueAt(i, TableService.getInstance().getColumnIndex("Beans", "Id"));

            // Set the selected row to the BeanModel that contains the target beanId.
            // Also make sure to scroll to the selected row, so that's it's guaranteed to be visible.
            if (tableRowId.equals(beanId)) {
               this.tableBeans.setRowSelectionInterval(i, i);
               this.tableBeans.scrollRectToVisible(new Rectangle(this.tableBeans.getCellRect(i, 0, true)));
               
               break;
            }
         }
      }
      
   }
   
   private void refreshRoastLogTable() {
      int currentIndex = this.listBeans.getSelectedIndex();

      // Get the first bean ID from the bean selection combobox.
      DefaultListModel listModel = (DefaultListModel) this.listBeans.getModel();
      BeanModel beanModel = (BeanModel) listModel.getElementAt(currentIndex);
      String beanId = beanModel.getBeanId();
      this.textDensity.setText(beanModel.getBeanDensity());

      // Populate the roast log table for the specified bean ID.
      NonEditableTableModel model = TableService.getInstance().getTableModelRoastLogsByBeanId(beanId);
      this.tableRoasts.setModel(model);

      // General table layout stuff, column widths, hidden columns, etc.
      TableService.getInstance().setupTableRoastLog(this.tableRoasts, this.textRoastNotes, this.textTastingNotes);
      
      this.listBeans.setSelectedIndex(currentIndex);
   }

   // =======================================================================================================================================
   private void initOther() {
      try {
         JRootPane jrp = this.getRootPane();

         // register an action listener on the Escape key which performs a click
         // of the Exit button.
         ActionListener actionListenerExit = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
               int response = JOptionPane.showConfirmDialog(CoffeeFrame.this, "Exit?", "Confirm Exit", JOptionPane.OK_CANCEL_OPTION);
               if (response == JOptionPane.OK_OPTION) {
                  buttonExit.doClick();
               }
            }
         };

         // wire this up for ALT + left/right arrow to move between tabs in the tabbed panel.
         ActionListener actionListenerLeft = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
               int tabCount = tabbedPane.getTabCount();
               int selectedIndex = tabbedPane.getSelectedIndex() - 1;
               if (selectedIndex < 0) {
                  return;
               }
               
               tabbedPane.setSelectedIndex(selectedIndex);
            }
         };
         
         ActionListener actionListenerRight = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
               int tabCount = tabbedPane.getTabCount();
               int selectedIndex = tabbedPane.getSelectedIndex() + 1;
               if (selectedIndex >= tabCount) {
                  return;
               }
               
               tabbedPane.setSelectedIndex(selectedIndex);
            }
         };

         // Register ESCAPE as the keystroke to confirm exiting the program.
         KeyStroke strokeEscape = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);

         // Registers ALT + LEFT/RIGHT ARROW to navigate between tabs of parent tabbed pane.
         KeyStroke strokeAltLeft = KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.ALT_DOWN_MASK);
         KeyStroke strokeAltRight = KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.ALT_DOWN_MASK);
         
         jrp.registerKeyboardAction(actionListenerExit, strokeEscape, JComponent.WHEN_IN_FOCUSED_WINDOW);
         jrp.registerKeyboardAction(actionListenerLeft, strokeAltLeft, JComponent.WHEN_IN_FOCUSED_WINDOW);
         jrp.registerKeyboardAction(actionListenerRight, strokeAltRight, JComponent.WHEN_IN_FOCUSED_WINDOW);

         // This prevents the default action of navigating down on press of ENTER, in the Beans table.
         this.tableBeans.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
         this.tableBeans.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
            }
         });

         // Same thing for the Roasts table.    
         this.tableRoasts.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
         this.tableRoasts.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
            }
         });

         // Load up the window preferences, which restores the size/location of the window.
         AppPreferences.loadWindowPreferences(this);

         // Custom cell renderer sets a different foreground color for beans out of stock.
         this.listBeans.setCellRenderer(new CustomListCellRenderer());

         // Select the first bean in the list by default.
         this.listBeans.setSelectedIndex(0);

         // Load up the Roast Log JTable with the selected bean.
         this.refreshRoastLogTable();

         // General table layout stuff, column widths, hidden columns, etc.
         TableService.getInstance().setupTableBeans(this.tableBeans);
         
         this.getBeanTotals();
         
         Runnable runner = () -> {
            this.listBeans.requestFocus();
         };
         SwingUtilities.invokeLater(runner);
         
      } catch (Exception e) {
         JOptionPane.showMessageDialog(this, "CoffeeFrame.initOther() " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         e.printStackTrace();
      }
      
      this.tableRoasts.requestFocus();
   }
   
   public boolean shouldExit = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBean;
    private javax.swing.JButton btnAddRoastLog;
    private javax.swing.JButton btnDeleteBean;
    private javax.swing.JButton btnDeleteRoastLog;
    private javax.swing.JButton btnEditBean;
    private javax.swing.JButton btnEditRoastLog;
    private javax.swing.JButton buttonExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel labelInStock;
    private javax.swing.JLabel labelRoastNotes;
    private javax.swing.JLabel labelTastingNotes;
    private javax.swing.JLabel labelTotalBeans;
    private javax.swing.JList<String> listBeans;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHellp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemGtk;
    private javax.swing.JMenuItem menuItemMetal;
    private javax.swing.JMenuItem menuItemMotif;
    private javax.swing.JMenuItem menuItemNimbus;
    private javax.swing.JMenuItem menuItemWindows;
    private javax.swing.JMenuItem menuItemWindowsClassic;
    private javax.swing.JMenu menuLookAndFeel;
    private javax.swing.JMenu menuView;
    private javax.swing.JPanel panelBeanList;
    private javax.swing.JPanel panelBeans;
    private javax.swing.JPanel panelButtonsBean;
    private javax.swing.JPanel panelButtonsRoastLog;
    private javax.swing.JPanel panelNotes;
    private javax.swing.JPanel panelRoastLogTable;
    private javax.swing.JPanel panelRoastLogs;
    private javax.swing.JPanel panelRoastTable;
    private javax.swing.JPanel panelSummary;
    private javax.swing.JPanel panelTableHeader;
    private javax.swing.JScrollPane scrollPaneRoasts;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tableBeans;
    private javax.swing.JTable tableRoasts;
    private javax.swing.JTextField textDensity;
    private javax.swing.JTextField textInStock;
    private javax.swing.JTextArea textRoastNotes;
    private javax.swing.JTextArea textTastingNotes;
    private javax.swing.JTextField textTotalBeans;
    // End of variables declaration//GEN-END:variables
}
