/*
 */
package com.smanis.coffee.forms;

import com.smanis.coffee.AppPreferences;
import com.smanis.coffee.service.DataService;
import com.smanis.coffee.Utility;
import com.smanis.coffee.models.BeanModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.text.DefaultFormatterFactory;

/**
 *
 * @author semanis
 */
public class RoastLogEdit extends javax.swing.JDialog {

   /**
    * Creates new form RoastLogEdit
    */
   public RoastLogEdit(java.awt.Frame parent, boolean modal) {
      super(parent, modal);

      initComponents();
      initOther();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the
    * Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      btnCancel = new javax.swing.JButton();
      btnSave = new javax.swing.JButton();
      panelTimers = new javax.swing.JPanel();
      labelRoastTimer = new javax.swing.JLabel();
      textRoastTimer = new javax.swing.JTextField();
      labelFcTimer = new javax.swing.JLabel();
      textFcTimer = new javax.swing.JTextField();
      panelRoastNotes = new javax.swing.JPanel();
      jScrollPane3 = new javax.swing.JScrollPane();
      textAreaRoastNotes = new javax.swing.JTextArea();
      jLabel2 = new javax.swing.JLabel();
      panelRoastDate = new javax.swing.JPanel();
      labelRoastDate = new javax.swing.JLabel();
      ftRoastDate = new JFormattedTextField(Utility.createMaskFormatter("##/##/####"));
      jLabel1 = new javax.swing.JLabel();
      ftGreenWeight = new JFormattedTextField(Utility.createMaskFormatter("###.#"));
      labelRoastedWeight = new javax.swing.JLabel();
      ftRoastedWeight = new JFormattedTextField(Utility.createMaskFormatter("###.#"));
      labelDifference = new javax.swing.JLabel();
      textDifferenceMsg = new javax.swing.JTextField();
      labelMoistureLoss = new javax.swing.JLabel();
      textMoistureLossMsg = new javax.swing.JTextField();
      labelRoastLevel = new javax.swing.JLabel();
      panelTimes = new javax.swing.JPanel();
      btnStartTime = new javax.swing.JButton();
      ftStartTime = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
      btnDryEnd = new javax.swing.JButton();
      ftDryEnd = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
      btnFcStart = new javax.swing.JButton();
      ftFcStart = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
      btnFcEnd = new javax.swing.JButton();
      ftFcEnd = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
      btnEndRoast = new javax.swing.JButton();
      ftEndRoast = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
      labelDryTime = new javax.swing.JLabel();
      labelDryTimeMsg = new javax.swing.JLabel();
      labelBrowningTime = new javax.swing.JLabel();
      labelBrowningTimeMsg = new javax.swing.JLabel();
      labelFcTime = new javax.swing.JLabel();
      labelFcTimeMsg = new javax.swing.JLabel();
      labelDevTime = new javax.swing.JLabel();
      labelDevTimeMsg = new javax.swing.JLabel();
      labelRoastTime = new javax.swing.JLabel();
      labelRoastTimeMsg = new javax.swing.JLabel();

      setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
      setMinimumSize(new java.awt.Dimension(160, 160));
      setName("roastLogEdit"); // NOI18N
      setResizable(false);
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            formWindowClosing(evt);
         }
      });
      getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

      btnCancel.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnCancel.setMnemonic('c');
      btnCancel.setText("Cancel");
      btnCancel.setNextFocusableComponent(btnSave);
      btnCancel.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCancelActionPerformed(evt);
         }
      });
      getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 730, -1, -1));

      btnSave.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnSave.setMnemonic('v');
      btnSave.setText("Save");
      btnSave.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSaveActionPerformed(evt);
         }
      });
      getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 730, -1, -1));

      panelTimers.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      panelTimers.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

      labelRoastTimer.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelRoastTimer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      labelRoastTimer.setText("Roast Timer");
      panelTimers.add(labelRoastTimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 140, -1));

      textRoastTimer.setFont(new java.awt.Font("Dialog.plain", 0, 72)); // NOI18N
      textRoastTimer.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      panelTimers.add(textRoastTimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 250, 190));

      labelFcTimer.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelFcTimer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
      labelFcTimer.setText("FC Timer");
      panelTimers.add(labelFcTimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 100, -1));

      textFcTimer.setFont(new java.awt.Font("Dialog.plain", 0, 72)); // NOI18N
      textFcTimer.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      panelTimers.add(textFcTimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 260, 190));

      getContentPane().add(panelTimers, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 350, 610, 370));

      panelRoastNotes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      panelRoastNotes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

      jScrollPane3.setHorizontalScrollBar(null);
      jScrollPane3.setMaximumSize(new java.awt.Dimension(343, 113));
      jScrollPane3.setMinimumSize(new java.awt.Dimension(343, 113));

      textAreaRoastNotes.setColumns(20);
      textAreaRoastNotes.setLineWrap(true);
      textAreaRoastNotes.setRows(5);
      textAreaRoastNotes.setMinimumSize(new java.awt.Dimension(101, 340));
      textAreaRoastNotes.setNextFocusableComponent(btnCancel);
      jScrollPane3.setViewportView(textAreaRoastNotes);

      panelRoastNotes.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 430, 320));

      jLabel2.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      jLabel2.setText("Roast Notes");
      panelRoastNotes.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

      getContentPane().add(panelRoastNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 470, 370));

      panelRoastDate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      panelRoastDate.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

      labelRoastDate.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelRoastDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelRoastDate.setText("Roast Date");
      labelRoastDate.setMaximumSize(new java.awt.Dimension(110, 30));
      labelRoastDate.setMinimumSize(new java.awt.Dimension(110, 30));
      labelRoastDate.setPreferredSize(new java.awt.Dimension(110, 30));
      panelRoastDate.add(labelRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, -1));

      ftRoastDate.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##/##/####")));
      ftRoastDate.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftRoastDate.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftRoastDate.setMaximumSize(new java.awt.Dimension(110, 30));
      ftRoastDate.setMinimumSize(new java.awt.Dimension(110, 30));
      ftRoastDate.setNextFocusableComponent(ftGreenWeight);
      ftRoastDate.setPreferredSize(new java.awt.Dimension(110, 30));
      ftRoastDate.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftRoastDateFocusGained(evt);
         }
      });
      panelRoastDate.add(ftRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 140, -1));

      jLabel1.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabel1.setText("Green Wgt.");
      jLabel1.setMaximumSize(new java.awt.Dimension(110, 30));
      jLabel1.setMinimumSize(new java.awt.Dimension(110, 30));
      jLabel1.setPreferredSize(new java.awt.Dimension(110, 30));
      panelRoastDate.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 120, -1));

      ftGreenWeight.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("###.#")));
      ftGreenWeight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      ftGreenWeight.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftGreenWeight.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftGreenWeight.setMaximumSize(new java.awt.Dimension(110, 30));
      ftGreenWeight.setMinimumSize(new java.awt.Dimension(110, 30));
      ftGreenWeight.setNextFocusableComponent(ftRoastedWeight);
      ftGreenWeight.setPreferredSize(new java.awt.Dimension(110, 30));
      ftGreenWeight.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftGreenWeightFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            ftGreenWeightFocusLost(evt);
         }
      });
      panelRoastDate.add(ftGreenWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 140, -1));

      labelRoastedWeight.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelRoastedWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelRoastedWeight.setText("Roasted Wgt.");
      panelRoastDate.add(labelRoastedWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 140, -1));

      ftRoastedWeight.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("###.#")));
      ftRoastedWeight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      ftRoastedWeight.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftRoastedWeight.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftRoastedWeight.setMaximumSize(new java.awt.Dimension(110, 30));
      ftRoastedWeight.setMinimumSize(new java.awt.Dimension(110, 30));
      ftRoastedWeight.setNextFocusableComponent(textDifferenceMsg);
      ftRoastedWeight.setPreferredSize(new java.awt.Dimension(110, 30));
      ftRoastedWeight.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftRoastedWeightFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            ftRoastedWeightFocusLost(evt);
         }
      });
      panelRoastDate.add(ftRoastedWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 140, -1));

      labelDifference.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelDifference.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelDifference.setText("Difference");
      panelRoastDate.add(labelDifference, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 130, -1));

      textDifferenceMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      textDifferenceMsg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      textDifferenceMsg.setText("   ");
      textDifferenceMsg.setFocusable(false);
      textDifferenceMsg.setMaximumSize(new java.awt.Dimension(110, 30));
      textDifferenceMsg.setMinimumSize(new java.awt.Dimension(110, 30));
      textDifferenceMsg.setNextFocusableComponent(textMoistureLossMsg);
      textDifferenceMsg.setPreferredSize(new java.awt.Dimension(110, 30));
      panelRoastDate.add(textDifferenceMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 140, -1));

      labelMoistureLoss.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelMoistureLoss.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelMoistureLoss.setText("Moisture Loss");
      labelMoistureLoss.setAlignmentY(0.0F);
      panelRoastDate.add(labelMoistureLoss, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

      textMoistureLossMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      textMoistureLossMsg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      textMoistureLossMsg.setText(" ");
      textMoistureLossMsg.setFocusable(false);
      textMoistureLossMsg.setMaximumSize(new java.awt.Dimension(110, 30));
      textMoistureLossMsg.setMinimumSize(new java.awt.Dimension(110, 30));
      textMoistureLossMsg.setNextFocusableComponent(btnStartTime);
      textMoistureLossMsg.setPreferredSize(new java.awt.Dimension(110, 30));
      panelRoastDate.add(textMoistureLossMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 220, 140, -1));

      labelRoastLevel.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelRoastLevel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      labelRoastLevel.setFocusable(false);
      panelRoastDate.add(labelRoastLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 380, 30));

      getContentPane().add(panelRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 470, 310));

      panelTimes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      panelTimes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

      btnStartTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnStartTime.setMnemonic('s');
      btnStartTime.setText("Start Time");
      btnStartTime.setMargin(new java.awt.Insets(0, 0, 0, 0));
      btnStartTime.setMaximumSize(new java.awt.Dimension(110, 30));
      btnStartTime.setMinimumSize(new java.awt.Dimension(110, 30));
      btnStartTime.setNextFocusableComponent(ftStartTime);
      btnStartTime.setPreferredSize(new java.awt.Dimension(110, 30));
      btnStartTime.setRolloverEnabled(true);
      btnStartTime.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnStartTimeActionPerformed(evt);
         }
      });
      panelTimes.add(btnStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, -1));

      ftStartTime.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
      ftStartTime.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftStartTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftStartTime.setMaximumSize(new java.awt.Dimension(110, 30));
      ftStartTime.setMinimumSize(new java.awt.Dimension(110, 30));
      ftStartTime.setNextFocusableComponent(btnDryEnd);
      ftStartTime.setPreferredSize(new java.awt.Dimension(110, 30));
      ftStartTime.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftStartTimeFocusGained(evt);
         }
      });
      panelTimes.add(ftStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 120, -1));

      btnDryEnd.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnDryEnd.setMnemonic('d');
      btnDryEnd.setText("Dry End");
      btnDryEnd.setMargin(new java.awt.Insets(0, 0, 0, 0));
      btnDryEnd.setMaximumSize(new java.awt.Dimension(110, 30));
      btnDryEnd.setMinimumSize(new java.awt.Dimension(110, 30));
      btnDryEnd.setNextFocusableComponent(ftDryEnd);
      btnDryEnd.setPreferredSize(new java.awt.Dimension(110, 30));
      btnDryEnd.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDryEndActionPerformed(evt);
         }
      });
      panelTimes.add(btnDryEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 140, -1));

      ftDryEnd.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
      ftDryEnd.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftDryEnd.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftDryEnd.setMaximumSize(new java.awt.Dimension(110, 30));
      ftDryEnd.setMinimumSize(new java.awt.Dimension(110, 30));
      ftDryEnd.setNextFocusableComponent(btnFcStart);
      ftDryEnd.setPreferredSize(new java.awt.Dimension(110, 30));
      ftDryEnd.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftDryEndFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            ftDryEndFocusLost(evt);
         }
      });
      panelTimes.add(ftDryEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 120, -1));

      btnFcStart.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnFcStart.setMnemonic('f');
      btnFcStart.setText("FC Start");
      btnFcStart.setMargin(new java.awt.Insets(0, 0, 0, 0));
      btnFcStart.setMaximumSize(new java.awt.Dimension(110, 30));
      btnFcStart.setMinimumSize(new java.awt.Dimension(110, 30));
      btnFcStart.setNextFocusableComponent(ftFcStart);
      btnFcStart.setPreferredSize(new java.awt.Dimension(110, 30));
      btnFcStart.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFcStartActionPerformed(evt);
         }
      });
      panelTimes.add(btnFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 140, -1));

      ftFcStart.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
      ftFcStart.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftFcStart.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftFcStart.setMaximumSize(new java.awt.Dimension(110, 30));
      ftFcStart.setMinimumSize(new java.awt.Dimension(110, 30));
      ftFcStart.setNextFocusableComponent(btnFcEnd);
      ftFcStart.setPreferredSize(new java.awt.Dimension(110, 30));
      ftFcStart.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftFcStartFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            ftFcStartFocusLost(evt);
         }
      });
      panelTimes.add(ftFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 120, -1));

      btnFcEnd.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnFcEnd.setMnemonic('n');
      btnFcEnd.setText("FC End");
      btnFcEnd.setMargin(new java.awt.Insets(0, 0, 0, 0));
      btnFcEnd.setMaximumSize(new java.awt.Dimension(110, 30));
      btnFcEnd.setMinimumSize(new java.awt.Dimension(110, 30));
      btnFcEnd.setNextFocusableComponent(ftFcEnd);
      btnFcEnd.setPreferredSize(new java.awt.Dimension(110, 30));
      btnFcEnd.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnFcEndActionPerformed(evt);
         }
      });
      panelTimes.add(btnFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 140, -1));

      ftFcEnd.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
      ftFcEnd.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftFcEnd.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftFcEnd.setMaximumSize(new java.awt.Dimension(110, 30));
      ftFcEnd.setMinimumSize(new java.awt.Dimension(110, 30));
      ftFcEnd.setNextFocusableComponent(btnEndRoast);
      ftFcEnd.setPreferredSize(new java.awt.Dimension(110, 30));
      ftFcEnd.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftFcEndFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            ftFcEndFocusLost(evt);
         }
      });
      panelTimes.add(ftFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 120, -1));

      btnEndRoast.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      btnEndRoast.setMnemonic('e');
      btnEndRoast.setText("End");
      btnEndRoast.setMargin(new java.awt.Insets(0, 0, 0, 0));
      btnEndRoast.setMaximumSize(new java.awt.Dimension(110, 30));
      btnEndRoast.setMinimumSize(new java.awt.Dimension(110, 30));
      btnEndRoast.setNextFocusableComponent(ftEndRoast);
      btnEndRoast.setPreferredSize(new java.awt.Dimension(110, 30));
      btnEndRoast.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnEndRoastActionPerformed(evt);
         }
      });
      panelTimes.add(btnEndRoast, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 140, -1));

      ftEndRoast.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
      ftEndRoast.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
      ftEndRoast.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      ftEndRoast.setMaximumSize(new java.awt.Dimension(110, 30));
      ftEndRoast.setMinimumSize(new java.awt.Dimension(110, 30));
      ftEndRoast.setNextFocusableComponent(textAreaRoastNotes);
      ftEndRoast.setPreferredSize(new java.awt.Dimension(110, 30));
      ftEndRoast.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            ftEndRoastFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            ftEndRoastFocusLost(evt);
         }
      });
      panelTimes.add(ftEndRoast, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 120, -1));

      labelDryTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelDryTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelDryTime.setText("Dry Time");
      panelTimes.add(labelDryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 140, -1));

      labelDryTimeMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelDryTimeMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      labelDryTimeMsg.setText(" ");
      labelDryTimeMsg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      labelDryTimeMsg.setFocusable(false);
      panelTimes.add(labelDryTimeMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 70, 80, -1));

      labelBrowningTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelBrowningTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelBrowningTime.setText("Browing Time");
      panelTimes.add(labelBrowningTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 140, -1));

      labelBrowningTimeMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelBrowningTimeMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      labelBrowningTimeMsg.setText(" ");
      labelBrowningTimeMsg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      labelBrowningTimeMsg.setFocusable(false);
      panelTimes.add(labelBrowningTimeMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, 80, -1));

      labelFcTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelFcTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelFcTime.setText("FC Time");
      panelTimes.add(labelFcTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, 140, -1));

      labelFcTimeMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelFcTimeMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      labelFcTimeMsg.setText(" ");
      labelFcTimeMsg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      labelFcTimeMsg.setFocusable(false);
      panelTimes.add(labelFcTimeMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 170, 80, -1));

      labelDevTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelDevTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelDevTime.setText("Dev. Time");
      panelTimes.add(labelDevTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 220, 140, -1));

      labelDevTimeMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelDevTimeMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      labelDevTimeMsg.setText(" ");
      labelDevTimeMsg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      labelDevTimeMsg.setFocusable(false);
      panelTimes.add(labelDevTimeMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 220, 80, -1));

      labelRoastTime.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelRoastTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      labelRoastTime.setText("Roast Time");
      panelTimes.add(labelRoastTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, 140, -1));

      labelRoastTimeMsg.setFont(new java.awt.Font("Dialog.plain", 0, 20)); // NOI18N
      labelRoastTimeMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      labelRoastTimeMsg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
      labelRoastTimeMsg.setFocusable(false);
      labelRoastTimeMsg.setMaximumSize(new java.awt.Dimension(10, 28));
      labelRoastTimeMsg.setMinimumSize(new java.awt.Dimension(10, 28));
      labelRoastTimeMsg.setPreferredSize(new java.awt.Dimension(10, 28));
      panelTimes.add(labelRoastTimeMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 270, 80, 30));

      getContentPane().add(panelTimes, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 610, 310));

      setSize(new java.awt.Dimension(1150, 809));
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

    private void ftGreenWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftGreenWeightFocusLost
      this.calculateMoistureLoss();
    }//GEN-LAST:event_ftGreenWeightFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      this.exitForm();
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
      this.exitForm();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void ftDryEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftDryEndFocusLost
      this.calculateDryTime();
    }//GEN-LAST:event_ftDryEndFocusLost

    private void ftFcStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcStartFocusLost
      this.calculateFirstCrackTime();
      this.calculateBrowningTime();
    }//GEN-LAST:event_ftFcStartFocusLost

    private void ftFcEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcEndFocusLost
      this.calculateFirstCrackTime();
    }//GEN-LAST:event_ftFcEndFocusLost

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
      this.persistRoastLog();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void ftGreenWeightFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftGreenWeightFocusGained
      Utility.selectAll(this.ftGreenWeight);
    }//GEN-LAST:event_ftGreenWeightFocusGained

    private void ftStartTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftStartTimeFocusGained
      Utility.selectAll(this.ftStartTime);
    }//GEN-LAST:event_ftStartTimeFocusGained

    private void ftDryEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftDryEndFocusGained
      Utility.selectAll(this.ftDryEnd);

    }//GEN-LAST:event_ftDryEndFocusGained

    private void ftFcStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcStartFocusGained
      Utility.selectAll(this.ftFcStart);
    }//GEN-LAST:event_ftFcStartFocusGained

    private void ftFcEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcEndFocusGained
      Utility.selectAll(this.ftFcEnd);
    }//GEN-LAST:event_ftFcEndFocusGained

    private void ftEndRoastFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftEndRoastFocusGained
      Utility.selectAll(this.ftEndRoast);
    }//GEN-LAST:event_ftEndRoastFocusGained

    private void ftRoastedWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastedWeightFocusLost
      this.calculateMoistureLoss();
    }//GEN-LAST:event_ftRoastedWeightFocusLost

    private void ftEndRoastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftEndRoastFocusLost
      this.calculateDevelopmentTime();
      this.calculateRoastTime();
    }//GEN-LAST:event_ftEndRoastFocusLost

    private void ftRoastDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastDateFocusGained
      Utility.selectAll(this.ftRoastDate);
    }//GEN-LAST:event_ftRoastDateFocusGained

    private void ftRoastedWeightFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastedWeightFocusGained
      Utility.selectAll(this.ftRoastedWeight);
    }//GEN-LAST:event_ftRoastedWeightFocusGained

    private void btnStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartTimeActionPerformed
      Utility.verifyOverwriteTime(this.ftStartTime);

      this.millisRoastStart = System.currentTimeMillis();
      this.timerRoast.start();
    }//GEN-LAST:event_btnStartTimeActionPerformed

    private void btnDryEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDryEndActionPerformed
      Utility.verifyOverwriteTime(this.ftDryEnd);

      this.calculateDryTime();
    }//GEN-LAST:event_btnDryEndActionPerformed

   private void btnFcStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFcStartActionPerformed
      Utility.verifyOverwriteTime(this.ftFcStart);

      this.calculateBrowningTime();

      this.millisFcStart = System.currentTimeMillis();
      this.timerFc.start();

   }//GEN-LAST:event_btnFcStartActionPerformed

   private void btnFcEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFcEndActionPerformed
      Utility.verifyOverwriteTime(this.ftFcEnd);

      this.calculateFirstCrackTime();
      this.timerFc.stop();

   }//GEN-LAST:event_btnFcEndActionPerformed

   private void btnEndRoastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndRoastActionPerformed
      Utility.verifyOverwriteTime(this.ftEndRoast);

      this.timerRoast.stop();

      this.calculateDevelopmentTime();
      this.calculateRoastTime();
   }//GEN-LAST:event_btnEndRoastActionPerformed

   //
   //============[ Public Methods ]===================================================
   //
   //
   /**
    * When you add/edit a RoastLog, the currently selected bean in the bean list of the Roast Log view is passed here. The bean list is populated with BeanModel objects
    * (which contain bean name, bean ID, density, and in stock indicator)
    *
    */
   public void setBeanModel(BeanModel bm) {
      this.beanModel = bm;
      this.setTitle(this.beanModel.getBeanName() + " (Density: " + this.beanModel.getBeanDensity() + ")");
   }

   /**
    * If adding a new Roast Log, you can prepopulate the Green Weight field with a preferred value.
    *
    * @param weight A String value in the format of "###.#".
    */
   public void setGreenWeight(String weight) {
      this.ftGreenWeight.setValue(weight);
   }

   // Allows the caller to set a Roast Log ID that you want to edit.  
   // This component handles the details of loading/transforming that data from
   // the database.
   public void setRoastLogId(String id) {
      this.roastId = id;

      try {
         ResultSet rs = DataService.getInstance().getRoastLogById(id);

         if (rs.next()) {
            this.loadDataFromResultSet(rs);

            // Adds total time message after the appropriate fields and
            // creates the moisture loss values/messages.
            this.calculateMoistureLoss();
            this.calculateDryTime();
            this.calculateBrowningTime();
            this.calculateFirstCrackTime();
            this.calculateDevelopmentTime();
            this.calculateRoastTime();
         } else {
            // You should never get here, but I'm a touch anal with error handling.
            JOptionPane.showMessageDialog(this, "No Roast Log found for ID '" + this.roastId + "'.", "Error", JOptionPane.ERROR_MESSAGE);
         }
      } catch (Exception e) {
         Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, "setRoastLogId(String id) " + e.getMessage());
      }

   }

   public void setRoastStartDate(Date d) {
      this.ftRoastDate.setValue(new SimpleDateFormat("MM/dd/yy").format(d));
   }

   //
   //==========[ Private Methods ]=====================================================================
   //
   private void calculateBrowningTime() {
      if (Utility.isEmptyTime(this.ftDryEnd) || Utility.isEmptyTime(this.ftFcStart)) {
         return;
      }

      String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftDryEnd, this.ftFcStart);

      this.labelBrowningTimeMsg.setText(timeDeltaString);
   }

   /**
    * Calculates Development Time (the elapsed time from FC End to End Roast).
    */
   private void calculateDevelopmentTime() {
      String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftFcEnd, this.ftEndRoast);

      this.labelDevTimeMsg.setText(timeDeltaString);
   }

   /**
    * Calculates and displays the Total Dry time.
    */
   private void calculateDryTime() {
      String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftStartTime, this.ftDryEnd);

      this.labelDryTimeMsg.setText(timeDeltaString);
   }

   /**
    * Calculates and displays the total FC time to the right of the FC fields.
    */
   private void calculateFirstCrackTime() {
      String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftFcStart, this.ftFcEnd);

      this.labelFcTimeMsg.setText(timeDeltaString);
   }

   /**
    * Calculates the Moisture Loss percentage and the Roast Level.
    */
   private void calculateMoistureLoss() {
      if (Utility.isEmptyWeight(ftGreenWeight) || Utility.isEmptyWeight(ftRoastedWeight)) {
         return;
      }

      float greenWeight = Float.parseFloat((String) this.ftGreenWeight.getValue());
      float roastedWeight = Float.parseFloat((String) this.ftRoastedWeight.getValue());

      float moistureLossPercentage = ((greenWeight - roastedWeight) / greenWeight) * 100;
      String stringPercentage = String.format("%4.1f", moistureLossPercentage);
      moistureLossPercentage = Float.parseFloat(stringPercentage);

      this.textDifferenceMsg.setText(String.format("%.1f", greenWeight - roastedWeight) + "g");
      this.textMoistureLossMsg.setText(String.format("%.1f", moistureLossPercentage) + "%");

      this.calculateRoastLevel(moistureLossPercentage);

   }

   /**
    * Calculates the roast level, I split the difference between roast level values, and if you're at or below the halfway point, you stay at the lower roast level. If
    * you're over the halfway point, I bump you up to the next roast level.
    *
    * e.g., A perfect City Plus is 13.3% moisture loss A perfect Full City is 14.5% moisture loss
    *
    * There's 1.2% difference between these roast levels.
    *
    * Half of that would be .6%.
    *
    * So if the moisture loss for a roast is 13.9% or less, it will be graded as a City Plus. If the moisture loss was 14%, you'd be bumped up to a Full City.
    *
    * @param percentage A moisture loss percentage value.
    */
   private void calculateRoastLevel(float percentage) {
      String roastLevel = "";

      if (percentage <= 12.1) {
         roastLevel = "City Minus / Cinnamon roast";
      } else if (percentage <= 13.0f) {
         roastLevel = "City / Light roast";
      } else if (percentage <= 13.9f) {
         roastLevel = "City Plus / Light-Medium roast";
      } else if (percentage <= 14.8f) {
         roastLevel = "Full City / Full Medium roast";
      } else if (percentage <= 15.3f) {
         roastLevel = "Full City Plus / Medium-Dark roast";
      } else if (percentage <= 16.1f) {
         roastLevel = "French Roast";
      } else if (percentage >= 16.2f) {
         roastLevel = "Burnt?";
      }

      this.labelRoastLevel.setText(roastLevel);
   }

   private void calculateRoastTime() {
      String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftStartTime, this.ftEndRoast);

      this.labelRoastTimeMsg.setText(timeDeltaString);
   }

   /**
    * This method is invoked during the WindowClosing event or if you press the Exit button. This ensure that the appropriate exit logic is handled where you click the X to
    * close the window, or click the Exit button.
    */
   private void exitForm() {
      this.timerRoast.stop();
      this.timerFc.stop();

      AppPreferences.saveWindowPreferences(this);

      this.setVisible(false);
   }

   /**
    * Loads database ResultSet data into the editing form fields.
    *
    * @param rs The target ResultSet.
    */
   private void loadDataFromResultSet(ResultSet rs) {

      // Now load the resultset data into the appropriate fields.
      try {
         this.roastId = (String) rs.getString("Id");
         this.ftRoastDate.setValue(Utility.sqlDateToString(rs.getDate("RoastStart"), "MM/dd/yyyy"));
         this.ftStartTime.setValue(Utility.sqlDateToString(rs.getDate("RoastStart"), "HH:mm:ss"));
         // this.ftChargeTemp.setText(rs.getString("ChargeTemp"));
         this.ftGreenWeight.setValue(Utility.sqlFloatToString(rs.getFloat("GreenWeight"), "%05.1f"));
         this.ftRoastedWeight.setValue(Utility.sqlFloatToString(rs.getFloat("RoastedWeight"), "%05.1f"));
         this.ftDryEnd.setValue(Utility.sqlDateToString(rs.getDate("DryTime"), "HH:mm:ss"));
         this.ftFcStart.setValue(Utility.sqlDateToString(rs.getDate("FirstCrackStart"), "HH:mm:ss"));
         this.ftFcEnd.setValue(Utility.sqlDateToString(rs.getDate("FirstCrackEnd"), "HH:mm:ss"));
         this.ftEndRoast.setValue(Utility.sqlDateToString(rs.getDate("EndRoast"), "HH:mm:ss"));
         this.textAreaRoastNotes.setText(rs.getString("RoastNotes"));
      } catch (SQLException e) {
         Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage());
      }
   }

   /**
    * Persists the RoastLog being edited to the database.
    */
   private void persistRoastLog() {
      String roastDate = (String) this.ftRoastDate.getValue();
      String roastTime = (String) this.ftStartTime.getValue();

      String stringGreenWeight = (String) this.ftGreenWeight.getValue();
      float greenWeight = 0.0f;

      if (stringGreenWeight != null) {
         greenWeight = Float.parseFloat(stringGreenWeight);
      }

      String stringRoastedWeight = (String) this.ftRoastedWeight.getValue();
      float roastedWeight = 0.0f;

      if (stringRoastedWeight != null) {
         roastedWeight = Float.parseFloat(stringRoastedWeight);
      }

      String dryTime = (String) this.ftDryEnd.getValue();
      String firstCrackStart = (String) this.ftFcStart.getValue();
      String firstCrackEnd = (String) this.ftFcEnd.getValue();
      String endRoast = (String) this.ftEndRoast.getValue();
      String roastNotes = this.textAreaRoastNotes.getText();
      String tastingNotes = "";

      if (!(Utility.validateField(this.ftRoastDate, "Roast Date", "date")
          && Utility.validateField(this.ftStartTime, "Roast Time", "time")
          && Utility.validateField(this.ftGreenWeight, "Green Weight", "weight")
          && Utility.validateField(this.ftRoastedWeight, "Roasted Weight", "weight")
          && Utility.validateField(this.ftDryEnd, "Dry End Time", "time")
          && Utility.validateField(this.ftFcStart, "First Crack Time", "time")
          && Utility.validateField(this.ftFcEnd, "First Crack End Time", "time")
          && Utility.validateField(this.ftEndRoast, "End Roast Time", "time"))) {

         return;
      }

      String iso8601Date = Utility.dateMdyToYmd(roastDate);

      HashMap<String, Object> map = new HashMap<String, Object>();
      map.put("Id", this.roastId);
      map.put("BeanId", this.beanModel.getBeanId());
      map.put("RoastStart", iso8601Date + " " + roastTime);
      map.put("GreenWeight", greenWeight);
      map.put("RoastedWeight", roastedWeight);
      map.put("DryTime", iso8601Date + " " + dryTime);
      map.put("FirstCrackStart", iso8601Date + " " + firstCrackStart);
      map.put("FirstCrackEnd", iso8601Date + " " + firstCrackEnd);
      map.put("EndRoast", iso8601Date + " " + endRoast);
      map.put("RoastNotes", roastNotes);
      map.put("TastingNotes", tastingNotes);

      try {
         // if Id is empty, it's a new Roast Log.
         String id = (String) map.get("Id");
         if (id.equals("")) {
            DataService.getInstance().insertRoastLog(map);
            this.wasInserted = true;
         } else {
            // otherwise, you're editing.
            DataService.getInstance().updateRoastLog(map);
            this.wasUpdated = true;
         }

         JOptionPane.showMessageDialog(this, "Saved.", "Roast Log Saved", JOptionPane.INFORMATION_MESSAGE);

         //this.wasPersisted = true;
         this.exitForm();
      } catch (Exception e) {
         Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage(), e);
      }
   }

//
   //============[ Custom  Init ]===================================================================
   //
   private void initOther() {
      JRootPane jrp = this.getRootPane();
      // jrp.setDefaultButton(this.btnSave);

      // Register an action listener on the Escape key which performs a click of the Exit button.
      ActionListener actionListener = new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent actionEvent) {
            int response = JOptionPane.showConfirmDialog(RoastLogEdit.this, "Cancel editing?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
            if (response == JOptionPane.OK_OPTION) {
               btnCancel.doClick();
            }
         }
      };

      // Bind the Escape key to fire the action listener.    
      KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
      jrp.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);

      AppPreferences.loadWindowPreferences(RoastLogEdit.this);

      // These are default values for when you're adding a new Roast Log. 
      // If you're editing a Roast Log, the setRoastLogId() method overriees
      // these values;
      this.ftGreenWeight.setValue("250.0");
      this.textAreaRoastNotes.setText("Start: F8 / P2\n\n");

      // Nice little use of a Java Lamba to set the initial field focus.
      Runnable runner = () -> this.ftGreenWeight.requestFocus();
      SwingUtilities.invokeLater(runner);

   }

   //
   //============[ Private ]=====================================================================
   //
   private String roastId = "";
   private BeanModel beanModel;

   private Timer timerRoast = new Timer(1000, new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
         long secondsNow = System.currentTimeMillis() / 1000;
         long secondsStart = millisRoastStart / 1000;

         long secondsElapsed = secondsNow - secondsStart;

         long minutes = (secondsNow - secondsStart) / 60;

         if (minutes > 0) {
            secondsElapsed = secondsElapsed - (minutes * 60);
         }

         textRoastTimer.setText(String.format("%02d", minutes) + ":" + String.format("%02d", secondsElapsed));
      }
   });

   private Timer timerFc = new Timer(1000, new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
         long secondsNow = System.currentTimeMillis() / 1000;
         long secondsStart = millisFcStart / 1000;

         long secondsElapsed = secondsNow - secondsStart;

         long minutes = (secondsNow - secondsStart) / 60;

         if (minutes > 0) {
            secondsElapsed = secondsElapsed - (minutes * 60);
         }

         textFcTimer.setText(String.format("%02d", minutes) + ":" + String.format("%02d", secondsElapsed));
      }
   });

   private Date roastStartDate = null;

   public Boolean wasUpdated = false;
   public Boolean wasInserted = false;

   public long millisRoastStart;
   public long millisFcStart;

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnCancel;
   private javax.swing.JButton btnDryEnd;
   private javax.swing.JButton btnEndRoast;
   private javax.swing.JButton btnFcEnd;
   private javax.swing.JButton btnFcStart;
   private javax.swing.JButton btnSave;
   private javax.swing.JButton btnStartTime;
   private javax.swing.JFormattedTextField ftDryEnd;
   private javax.swing.JFormattedTextField ftEndRoast;
   private javax.swing.JFormattedTextField ftFcEnd;
   private javax.swing.JFormattedTextField ftFcStart;
   private javax.swing.JFormattedTextField ftGreenWeight;
   private javax.swing.JFormattedTextField ftRoastDate;
   private javax.swing.JFormattedTextField ftRoastedWeight;
   private javax.swing.JFormattedTextField ftStartTime;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JLabel labelBrowningTime;
   private javax.swing.JLabel labelBrowningTimeMsg;
   private javax.swing.JLabel labelDevTime;
   private javax.swing.JLabel labelDevTimeMsg;
   private javax.swing.JLabel labelDifference;
   private javax.swing.JLabel labelDryTime;
   private javax.swing.JLabel labelDryTimeMsg;
   private javax.swing.JLabel labelFcTime;
   private javax.swing.JLabel labelFcTimeMsg;
   private javax.swing.JLabel labelFcTimer;
   private javax.swing.JLabel labelMoistureLoss;
   private javax.swing.JLabel labelRoastDate;
   private javax.swing.JLabel labelRoastLevel;
   private javax.swing.JLabel labelRoastTime;
   private javax.swing.JLabel labelRoastTimeMsg;
   private javax.swing.JLabel labelRoastTimer;
   private javax.swing.JLabel labelRoastedWeight;
   private javax.swing.JPanel panelRoastDate;
   private javax.swing.JPanel panelRoastNotes;
   private javax.swing.JPanel panelTimers;
   private javax.swing.JPanel panelTimes;
   private javax.swing.JTextArea textAreaRoastNotes;
   private javax.swing.JTextField textDifferenceMsg;
   private javax.swing.JTextField textFcTimer;
   private javax.swing.JTextField textMoistureLossMsg;
   private javax.swing.JTextField textRoastTimer;
   // End of variables declaration//GEN-END:variables

}
