/*
 */
package com.smanis.coffee.forms;

import com.smanis.coffee.AppPreferences;
import com.smanis.coffee.service.DataService;
import com.smanis.coffee.Utility;
import com.smanis.coffee.models.BeanModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import javax.swing.text.DefaultFormatterFactory;

/**
 *
 * @author semanis
 */
public class RoastLogEdit extends javax.swing.JDialog {

    /**
     * Creates new form RoastLogEdit
     */
    public RoastLogEdit(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        initOther();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNotes = new javax.swing.JPanel();
        labelRoastNotes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaRoastNotes = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaTastingNotes = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        panelRoastInfo = new javax.swing.JPanel();
        labelBeans = new javax.swing.JLabel();
        comboBeans = new javax.swing.JComboBox<>();
        labelChargeTemp = new javax.swing.JLabel();
        labelGreenWeight = new javax.swing.JLabel();
        ftGreenWeight = new JFormattedTextField(Utility.createMaskFormatter("###.#"));
        labelRoastedWeight = new javax.swing.JLabel();
        ftRoastedWeight = new JFormattedTextField(Utility.createMaskFormatter("###.#"));
        labelDifferenceMessage = new javax.swing.JLabel();
        labelDifference = new javax.swing.JLabel();
        labelMoistureLoss = new javax.swing.JLabel();
        labelMoistureLossMessage = new javax.swing.JLabel();
        labelRoastLevel = new javax.swing.JLabel();
        labelRoastLevelMessage = new javax.swing.JLabel();
        labelDensity = new javax.swing.JLabel();
        ftChargeTemp = new javax.swing.JFormattedTextField();
        textRoastId = new javax.swing.JTextField();
        panelRoastTimes = new javax.swing.JPanel();
        labelDryComplete = new javax.swing.JLabel();
        ftDryTime = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        buttonNow1 = new javax.swing.JButton();
        labelFcEnd = new javax.swing.JLabel();
        labelFcStart = new javax.swing.JLabel();
        labelFcStart4 = new javax.swing.JLabel();
        buttonNow2 = new javax.swing.JButton();
        buttonNow3 = new javax.swing.JButton();
        buttonNow6 = new javax.swing.JButton();
        ftFcStart = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        ftFcEnd = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        ftEndRoast = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        labelDryTime = new javax.swing.JLabel();
        labelFcTime = new javax.swing.JLabel();
        labelTotalTime = new javax.swing.JLabel();
        labelDevTime = new javax.swing.JLabel();
        labelRoastDate = new javax.swing.JLabel();
        ftRoastDate = new JFormattedTextField(Utility.createMaskFormatter("##/##/####"));
        buttonNow = new javax.swing.JButton();
        labelRoastTime = new javax.swing.JLabel();
        ftRoastTime = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        buttonNow7 = new javax.swing.JButton();
        labelBrownTime = new javax.swing.JLabel();

        setTitle("Roast Log Editor");
        setMinimumSize(new java.awt.Dimension(160, 160));
        setName("roastLogEdit"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1236, 805));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelNotes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelNotes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelRoastNotes.setText("Roast Notes");
        panelNotes.add(labelRoastNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        textAreaRoastNotes.setColumns(20);
        textAreaRoastNotes.setLineWrap(true);
        textAreaRoastNotes.setRows(5);
        textAreaRoastNotes.setWrapStyleWord(true);
        textAreaRoastNotes.setMinimumSize(new java.awt.Dimension(101, 50));
        jScrollPane1.setViewportView(textAreaRoastNotes);

        panelNotes.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 650, 180));

        textAreaTastingNotes.setColumns(20);
        textAreaTastingNotes.setLineWrap(true);
        textAreaTastingNotes.setRows(5);
        textAreaTastingNotes.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textAreaTastingNotes);

        panelNotes.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 40, 640, 180));

        jLabel1.setText("Tasting Notes");
        panelNotes.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, -1, -1));

        getContentPane().add(panelNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 1330, 230));

        btnCancel.setMnemonic('c');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 640, -1, -1));

        btnSave.setMnemonic('v');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 640, -1, -1));

        panelRoastInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(" Roast Info "));
        panelRoastInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelBeans.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelBeans.setText("Bean :");
        panelRoastInfo.add(labelBeans, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, 20));

        comboBeans.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBeansItemStateChanged(evt);
            }
        });
        panelRoastInfo.add(comboBeans, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 430, 30));

        labelChargeTemp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelChargeTemp.setText("Charge Temp :");
        panelRoastInfo.add(labelChargeTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, 20));

        labelGreenWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelGreenWeight.setText("Green Weight :");
        panelRoastInfo.add(labelGreenWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 145, 30));

        ftGreenWeight.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("###.#")));
        ftGreenWeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ftGreenWeight.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftGreenWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftGreenWeightFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftGreenWeightFocusLost(evt);
            }
        });
        panelRoastInfo.add(ftGreenWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 100, -1));

        labelRoastedWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastedWeight.setText("Roasted Weight :");
        panelRoastInfo.add(labelRoastedWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 157, 20));

        ftRoastedWeight.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("###.#")));
        ftRoastedWeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ftRoastedWeight.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftRoastedWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftRoastedWeightFocusLost(evt);
            }
        });
        panelRoastInfo.add(ftRoastedWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 100, -1));

        labelDifferenceMessage.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDifferenceMessage.setMaximumSize(new java.awt.Dimension(42, 22));
        labelDifferenceMessage.setMinimumSize(new java.awt.Dimension(42, 22));
        labelDifferenceMessage.setPreferredSize(new java.awt.Dimension(42, 22));
        panelRoastInfo.add(labelDifferenceMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 250, 80, -1));

        labelDifference.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDifference.setText("Difference :");
        panelRoastInfo.add(labelDifference, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 138, 20));

        labelMoistureLoss.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelMoistureLoss.setText("Moisture Loss :");
        labelMoistureLoss.setAlignmentY(0.0F);
        panelRoastInfo.add(labelMoistureLoss, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 140, 20));

        labelMoistureLossMessage.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelMoistureLossMessage.setMaximumSize(new java.awt.Dimension(42, 22));
        labelMoistureLossMessage.setMinimumSize(new java.awt.Dimension(42, 22));
        labelMoistureLossMessage.setPreferredSize(new java.awt.Dimension(42, 22));
        panelRoastInfo.add(labelMoistureLossMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, 80, -1));

        labelRoastLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastLevel.setText("Roast Level :");
        panelRoastInfo.add(labelRoastLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 150, -1));

        labelRoastLevelMessage.setMaximumSize(new java.awt.Dimension(63, 22));
        labelRoastLevelMessage.setMinimumSize(new java.awt.Dimension(63, 22));
        labelRoastLevelMessage.setPreferredSize(new java.awt.Dimension(63, 22));
        panelRoastInfo.add(labelRoastLevelMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 280, -1));

        labelDensity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDensity.setText(" ");
        panelRoastInfo.add(labelDensity, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 80, 200, -1));

        ftChargeTemp.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        panelRoastInfo.add(ftChargeTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 115, -1));

        textRoastId.setFocusable(false);
        panelRoastInfo.add(textRoastId, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 24, -1, 0));

        getContentPane().add(panelRoastInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 640, 380));

        panelRoastTimes.setBorder(javax.swing.BorderFactory.createTitledBorder(" Roast Times "));
        panelRoastTimes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelDryComplete.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDryComplete.setText("Dry End :");
        panelRoastTimes.add(labelDryComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 140, -1));

        ftDryTime.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftDryTime.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftDryTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftDryTimeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftDryTimeFocusLost(evt);
            }
        });
        ftDryTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftDryTimeActionPerformed(evt);
            }
        });
        panelRoastTimes.add(ftDryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 100, -1));

        buttonNow1.setText("now");
        buttonNow1.setMaximumSize(new java.awt.Dimension(84, 32));
        buttonNow1.setMinimumSize(new java.awt.Dimension(84, 32));
        buttonNow1.setPreferredSize(new java.awt.Dimension(84, 32));
        buttonNow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNow1ActionPerformed(evt);
            }
        });
        panelRoastTimes.add(buttonNow1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 80, -1));

        labelFcEnd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelFcEnd.setText("FC End :");
        panelRoastTimes.add(labelFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 80, -1));

        labelFcStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelFcStart.setText("FC Start :");
        panelRoastTimes.add(labelFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 85, -1));

        labelFcStart4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelFcStart4.setText("End Roast :");
        panelRoastTimes.add(labelFcStart4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 110, -1));

        buttonNow2.setText("now");
        buttonNow2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNow2ActionPerformed(evt);
            }
        });
        panelRoastTimes.add(buttonNow2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 190, 80, -1));

        buttonNow3.setText("now");
        buttonNow3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNow3ActionPerformed(evt);
            }
        });
        panelRoastTimes.add(buttonNow3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, 80, -1));

        buttonNow6.setText("now");
        buttonNow6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNow6ActionPerformed(evt);
            }
        });
        panelRoastTimes.add(buttonNow6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, 80, -1));

        ftFcStart.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftFcStart.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftFcStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftFcStartFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftFcStartFocusLost(evt);
            }
        });
        panelRoastTimes.add(ftFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 100, -1));

        ftFcEnd.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftFcEnd.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftFcEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftFcEndFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftFcEndFocusLost(evt);
            }
        });
        panelRoastTimes.add(ftFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 100, -1));

        ftEndRoast.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftEndRoast.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftEndRoast.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftEndRoastFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftEndRoastFocusLost(evt);
            }
        });
        panelRoastTimes.add(ftEndRoast, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 100, -1));
        panelRoastTimes.add(labelDryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 250, 30));
        panelRoastTimes.add(labelFcTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, 260, 30));

        labelTotalTime.setText(" ");
        panelRoastTimes.add(labelTotalTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 260, 20));
        panelRoastTimes.add(labelDevTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 280, 240, 20));

        labelRoastDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastDate.setText("Roast Date :");
        panelRoastTimes.add(labelRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 120, -1));

        ftRoastDate.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##/##/####")));
        ftRoastDate.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        panelRoastTimes.add(ftRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 120, -1));

        buttonNow.setText("now");
        buttonNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNowActionPerformed(evt);
            }
        });
        panelRoastTimes.add(buttonNow, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 80, 30));

        labelRoastTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastTime.setText("Start Time :");
        panelRoastTimes.add(labelRoastTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 120, -1));

        ftRoastTime.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftRoastTime.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftRoastTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftRoastTimeFocusGained(evt);
            }
        });
        panelRoastTimes.add(ftRoastTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 100, -1));

        buttonNow7.setText("now");
        buttonNow7.setMaximumSize(new java.awt.Dimension(84, 32));
        buttonNow7.setMinimumSize(new java.awt.Dimension(84, 32));
        buttonNow7.setPreferredSize(new java.awt.Dimension(84, 32));
        buttonNow7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNow7ActionPerformed(evt);
            }
        });
        panelRoastTimes.add(buttonNow7, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 80, 30));
        panelRoastTimes.add(labelBrownTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, 270, 30));

        getContentPane().add(panelRoastTimes, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 680, 380));

        setSize(new java.awt.Dimension(1360, 715));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNowActionPerformed
        Utility.verifyOverwriteDate(this.ftRoastDate);
    }//GEN-LAST:event_buttonNowActionPerformed

    private void ftGreenWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftGreenWeightFocusLost
        this.calculateMoistureLoss();
    }//GEN-LAST:event_ftGreenWeightFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.exitForm();
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.exitForm();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void buttonNow7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNow7ActionPerformed
        Utility.verifyOverwriteTime(this.ftRoastTime);
    }//GEN-LAST:event_buttonNow7ActionPerformed

    private void buttonNow6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNow6ActionPerformed
        Utility.verifyOverwriteTime(this.ftEndRoast);
    }//GEN-LAST:event_buttonNow6ActionPerformed

    private void buttonNow3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNow3ActionPerformed
        Utility.verifyOverwriteTime(this.ftFcEnd);

        this.calculateTotalFirstCrackTime();
    }//GEN-LAST:event_buttonNow3ActionPerformed

    private void buttonNow2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNow2ActionPerformed
        Utility.verifyOverwriteTime(this.ftFcStart);

        this.calculateTotalFirstCrackTime();
    }//GEN-LAST:event_buttonNow2ActionPerformed

    private void buttonNow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNow1ActionPerformed
        Utility.verifyOverwriteTime(this.ftDryTime);

        this.calculateTotalDryTime();
    }//GEN-LAST:event_buttonNow1ActionPerformed

    private void ftDryTimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftDryTimeFocusLost
        this.calculateTotalDryTime();
    }//GEN-LAST:event_ftDryTimeFocusLost

    private void ftFcStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcStartFocusLost
        this.calculateTotalFirstCrackTime();
        this.calculateBrowningTime();
    }//GEN-LAST:event_ftFcStartFocusLost

    private void ftFcEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcEndFocusLost
        this.calculateTotalFirstCrackTime();
    }//GEN-LAST:event_ftFcEndFocusLost

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.persistRoastLog();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void ftGreenWeightFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftGreenWeightFocusGained
        this.ftGreenWeight.selectAll();
    }//GEN-LAST:event_ftGreenWeightFocusGained

    private void ftRoastTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastTimeFocusGained
        this.ftRoastTime.selectAll();
    }//GEN-LAST:event_ftRoastTimeFocusGained

    private void ftDryTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftDryTimeFocusGained
        this.ftDryTime.selectAll();
    }//GEN-LAST:event_ftDryTimeFocusGained

    private void ftFcStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcStartFocusGained
        this.ftFcStart.selectAll();
    }//GEN-LAST:event_ftFcStartFocusGained

    private void ftFcEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcEndFocusGained
        this.ftFcEnd.selectAll();
    }//GEN-LAST:event_ftFcEndFocusGained

    private void ftEndRoastFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftEndRoastFocusGained
        this.ftEndRoast.selectAll();
    }//GEN-LAST:event_ftEndRoastFocusGained

    private void comboBeansItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBeansItemStateChanged
        if (evt.getStateChange() != evt.SELECTED) {
            return;
        }

        BeanModel bm = (BeanModel) evt.getItem();
        if (bm == null) {
            return;
        }

        this.setBeanDensity(bm.getBeanDensity());
    }//GEN-LAST:event_comboBeansItemStateChanged

    private void ftRoastedWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastedWeightFocusLost
        this.calculateMoistureLoss();
    }//GEN-LAST:event_ftRoastedWeightFocusLost

    private void ftDryTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftDryTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftDryTimeActionPerformed

    private void ftEndRoastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftEndRoastFocusLost
        this.calculateTotalRoastTime();
        this.calculateDevelopmentTime();
    }//GEN-LAST:event_ftEndRoastFocusLost

    //    
    //============[ Custom Methods]=====================================================================
    //
    /**
     * Builds the data model for the JComboBox component.
     */
    private void buildComboboxModel() {
        try {
            // Query which returns just the Bean ID and Name.
            ResultSet rs = DataService.getInstance().getBeanIdsAndNames();

            Vector<Object> data = new Vector<Object>();

            while (rs.next()) {
                Float density = rs.getFloat("Density");
                data.add(new BeanModel(rs.getString("Id"), rs.getString("Name"), String.format("%.2f", density)));
            }

            this.comboBeans.setModel(new DefaultComboBoxModel(data));
            this.comboBeans.setMaximumRowCount(15);
        } catch (Exception e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage());
        }

    }

    private void calculateBrowningTime() {
        if (Utility.isEmptyTime(this.ftDryTime) || Utility.isEmptyTime(this.ftFcStart))  {
            return;
        }
        
         String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftDryTime, this.ftFcStart);        
         
         this.labelBrownTime.setText("Browning Time: " + timeDeltaString);
    } 
    
    private void calculateDevelopmentTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftFcEnd, this.ftEndRoast);

        this.labelDevTime.setText("Dev. Time: " + timeDeltaString);
    }
    
    
    /**
     * Calculates the Moisture Loss percentage and the Roast Level.
     */
    private void calculateMoistureLoss() {
        if (Utility.isEmptyWeight(ftGreenWeight) || Utility.isEmptyWeight(ftRoastedWeight)) {
            return;
        }

        float greenWeight = Float.parseFloat((String) this.ftGreenWeight.getValue());
        float roastedWeight = Float.parseFloat((String) this.ftRoastedWeight.getValue());

        float moistureLossPercentage = ((greenWeight - roastedWeight) / greenWeight) * 100;
        String stringPercentage = String.format("%4.1f", moistureLossPercentage);
        moistureLossPercentage = Float.parseFloat(stringPercentage);
        
        this.labelDifferenceMessage.setText(String.format("%.1f", greenWeight - roastedWeight) + "g");
        this.labelMoistureLossMessage.setText(String.format("%.1f", moistureLossPercentage) + "%");

        this.calculateRoastLevel(moistureLossPercentage);

    }

    /**
     * Calculates the roast level, I split the difference between roast level
     * values, and if you're at or below the halfway point, you stay at the
     * lower roast level. If you're over the halfway point, I bump you up to the
     * next roast level.
     *
     * e.g., A perfect City Plus is 13.3% moisture loss A perfect Full City is
     * 14.5% moisture loss
     *
     * There's 1.2% difference between these roast levels.
     *
     * Half of that would be .6%.
     *
     * So if the moisture loss for a roast is 13.9% or less, it will be graded
     * as a City Plus. If the moisture loss was 14%, you'd be bumped up to a
     * Full City.
     *
     * @param percentage A moisture loss percentage value.
     */
    private void calculateRoastLevel(float percentage) {
        String roastLevel = "";

        if (percentage <= 12.1) {
            roastLevel = "City Minus / Cinnamon roast";
        } else if (percentage <= 13.0f) {
            roastLevel = "City / Light roast";
        } else if (percentage <= 13.9f) {
            roastLevel = "City Plus / Light-Medium roast";
        } else if (percentage <= 14.8f) {
            roastLevel = "Full City / Full Medium roast";
        } else if (percentage <= 15.3f) {
            roastLevel = "Full City Plus / Medium-Dark roast";
        } else if (percentage <= 16.1f) {
            roastLevel = "French Roast";
        } else if (percentage >= 16.2f) {
            roastLevel = "Burnt?";
        }

        this.labelRoastLevelMessage.setText(roastLevel);
    }

    /**
     * Calculates and displays the Total Dry time to the right of the Dry
     * Complete field.
     */
    private void calculateTotalDryTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftRoastTime, this.ftDryTime);

        this.labelDryTime.setText("Dry Time: " + timeDeltaString);
    }

    private void calculateTotalRoastTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftRoastTime, this.ftEndRoast);

        this.labelTotalTime.setText("Total Time: " + timeDeltaString);
    }
    
    /**
     * Calculates and displays the total FC time to the right of the FC fields.
     */
    private void calculateTotalFirstCrackTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftFcStart, this.ftFcEnd);

        this.labelFcTime.setText("FC Total Time: " + timeDeltaString);
    }

    /**
     * This method is invoked during the WindowClosing event or if you press the
     * Exit button. This ensure that the appropriate exit logic is handled where
     * you click the X to close the window, or click the Exit button.
     */
    private void exitForm() {
        this.timer.stop();
        
        AppPreferences.saveWindowPreferences(this);

        this.setVisible(false);
    }

    /**
     * Loads database ResultSet data into the editing form fields.
     *
     * @param rs The target ResultSet.
     */
    private void loadDataFromResultSet(ResultSet rs) {

        // Now load the resultset data into the appropriate fields.
        try {
            this.textRoastId.setText(rs.getString("Id")); 
            this.ftRoastDate.setValue(Utility.sqlDateToString(rs.getDate("RoastStart"), "MM/dd/yyyy"));
            this.ftRoastTime.setValue(Utility.sqlDateToString(rs.getDate("RoastStart"), "HH:mm:ss"));
            this.ftChargeTemp.setText(rs.getString("ChargeTemp"));
            this.ftGreenWeight.setValue(Utility.sqlFloatToString(rs.getFloat("GreenWeight"), "%05.1f"));
            this.ftRoastedWeight.setValue(Utility.sqlFloatToString(rs.getFloat("RoastedWeight"), "%05.1f"));
            this.ftDryTime.setValue(Utility.sqlDateToString(rs.getDate("DryTime"), "HH:mm:ss"));
            this.ftFcStart.setValue(Utility.sqlDateToString(rs.getDate("FirstCrackStart"), "HH:mm:ss"));
            this.ftFcEnd.setValue(Utility.sqlDateToString(rs.getDate("FirstCrackEnd"), "HH:mm:ss"));
            this.ftEndRoast.setValue(Utility.sqlDateToString(rs.getDate("EndRoast"), "HH:mm:ss"));
            this.textAreaRoastNotes.setText(rs.getString("RoastNotes"));
            this.textAreaTastingNotes.setText(rs.getString("TastingNotes"));

        } catch (SQLException e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage());
        }
    }

    /**
     * Persists the RoastLog being edited to the database.
     */
    private void persistRoastLog() {
        String roastDate = (String)this.ftRoastDate.getValue();
        String roastTime = (String)this.ftRoastTime.getValue();
        BeanModel beanModel = (BeanModel)this.comboBeans.getSelectedItem();
        String chargeTemp = this.ftChargeTemp.getText();
        
        String stringGreenWeight = (String)this.ftGreenWeight.getValue();
        float greenWeight = 0.0f;
        
        if (stringGreenWeight != null) {
            greenWeight = Float.parseFloat(stringGreenWeight);
        }
        
        String stringRoastedWeight = (String)this.ftRoastedWeight.getValue();
        float roastedWeight = 0.0f;
        
        if (stringRoastedWeight != null) {
            roastedWeight = Float.parseFloat(stringRoastedWeight);
        }
        
        String dryTime = (String)this.ftDryTime.getValue();
        String firstCrackStart = (String)this.ftFcStart.getValue();
        String firstCrackEnd = (String)this.ftFcEnd.getValue();
        String endRoast = (String)this.ftEndRoast.getValue();
        String roastNotes = this.textAreaRoastNotes.getText();
        String tastingNotes = this.textAreaTastingNotes.getText();
        
        
        if ( !(beanModel != null &&
               Utility.validateField(this.ftRoastDate, "Roast Date", "date") && 
               Utility.validateField(this.ftRoastTime, "Roast Time", "time") && 
               Utility.validateField(this.ftChargeTemp, "Charge Temp.", "string") &&
               Utility.validateField(this.ftGreenWeight, "Green Weight", "weight") && 
               Utility.validateField(this.ftRoastedWeight, "Roasted Weight", "weight") &&
               Utility.validateField(this.ftDryTime, "Dry End Time", "time") &&
               Utility.validateField(this.ftFcStart, "First Crack Time", "time") &&  
               Utility.validateField(this.ftFcEnd, "First Crack End Time", "time") &&  
               Utility.validateField(this.ftEndRoast, "End Roast Time", "time")) ) {
            
            return;
        }

        String iso8601Date = Utility.dateMdyToYmd(roastDate);
        
        HashMap map = new HashMap();
        map.put("Id", this.textRoastId.getText());
        map.put("BeanId", beanModel.getBeanId());
        map.put("RoastStart", iso8601Date + " " + roastTime);
        map.put("ChargeTemp", chargeTemp);
        map.put("GreenWeight", greenWeight);
        map.put("RoastedWeight", roastedWeight);
        map.put("DryTime", iso8601Date + " " + dryTime);
        map.put("FirstCrackStart", iso8601Date + " " + firstCrackStart);
        map.put("FirstCrackEnd", iso8601Date + " " + firstCrackEnd);
        map.put("EndRoast", iso8601Date + " " + endRoast);
        map.put("RoastNotes", roastNotes);
        map.put("TastingNotes",tastingNotes);        

        
        try {
            // if Id is null, it's a new Roast Log.
            if (((String)map.get("Id")).isEmpty()) {
                DataService.getInstance().insertRoastLog(map);
            }
            else {
                // otherwise, you're editing.
                DataService.getInstance().updateRoastLog(map);
            }
            
            // CoffeeFrame looks at this value to determine if it needs to refresh the RoastLog table.
            this.wasPersisted = true;
            
            JOptionPane.showMessageDialog(this, "Saved.", "Roast Log Saved", JOptionPane.INFORMATION_MESSAGE);
            
            this.exitForm();
        } catch (Exception e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage(), e);
        }
    }

    /**
     * Sets the Bean Density message, which is a label that appears beneath the
     * bean combobox.
     *
     * @param beanDensity A String bean density value, e.g. "0.72".
     */
    private void setBeanDensity(String beanDensity) {
        this.labelDensity.setText("(" + beanDensity + " Bean Density)");
    }

    // Allows the caller to set a Roast Log ID that you want to edit.  
    // This component handles the details of loading/transforming that data from
    // the database.
    public void setRoastLogId(String id) {
        this.textRoastId.setText(id);

        try {
            ResultSet rs = DataService.getInstance().getRoastLogById(id);

            if (rs.next()) {
                // The Id of the Bean to set as the combo's initial selection.
                String targetBeanId = rs.getString("BeanId");

                // first, set the combobox selection to match the bean we're editing.
                DefaultComboBoxModel model = (DefaultComboBoxModel) this.comboBeans.getModel();
                int rows = model.getSize();

                BeanModel bm = null;
                for (int i = 0; i < rows; i++) {
                    bm = (BeanModel) model.getElementAt(i);
                    if (bm.getBeanId().equals(targetBeanId)) {
                        this.comboBeans.setSelectedIndex(i);
                        this.setBeanDensity(bm.getBeanDensity());
                        break;
                    }
                }

                this.loadDataFromResultSet(rs);

                // Adds total time message after the appropriate fields and
                // creates the moisture loss values/messages.
                this.calculateMoistureLoss();
                this.calculateTotalDryTime();
                this.calculateBrowningTime();
                this.calculateTotalFirstCrackTime();
                this.calculateDevelopmentTime();
                this.calculateTotalRoastTime();

            } else {
                // You should never get here, but I'm a touch anal with error handling.
                JOptionPane.showMessageDialog(this, "No Roast Log found for ID '" + this.roastLogId + "'.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, "setRoastLogId(String id) " + e.getMessage());
        }

    }

    //
    //============[ Custom  Init ]===================================================================
    //
    private void initOther() {
        this.buildComboboxModel();

        JRootPane jrp = this.getRootPane();
        // jrp.setDefaultButton(this.btnSave);

        // Register an action listener on the Escape key which performs a click of the Exit button.
        ActionListener actionListener = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                int response = JOptionPane.showConfirmDialog(RoastLogEdit.this, "Cancel editing?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
                if (response == JOptionPane.OK_OPTION) {
                    btnCancel.doClick();
                }
            }
        };

        // Bind the Escape key to fire the action listener.    
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        jrp.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);

        AppPreferences.loadWindowPreferences(RoastLogEdit.this);

        // Display current timer every second as HH:mm:ss in the JFrame title.
                    
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a");            

        // Timer displays the current time (formatted above))) in the window title and updates once a second.
        this.timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                setTitle("Roast Log Editor - " + dtf.format(LocalTime.now()));
            }
        });
        
        timer.setRepeats(true);
        timer.start();
    }

    //
    //============[ Sub-Classes]=====================================================================
    //
    // Note wasPersisted is public. I'm lazy and didn't want to write a getter.
    public boolean wasPersisted = false;
    
    private String roastLogId;
    private javax.swing.Timer timer;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton buttonNow;
    private javax.swing.JButton buttonNow1;
    private javax.swing.JButton buttonNow2;
    private javax.swing.JButton buttonNow3;
    private javax.swing.JButton buttonNow6;
    private javax.swing.JButton buttonNow7;
    private javax.swing.JComboBox<String> comboBeans;
    private javax.swing.JFormattedTextField ftChargeTemp;
    private javax.swing.JFormattedTextField ftDryTime;
    private javax.swing.JFormattedTextField ftEndRoast;
    private javax.swing.JFormattedTextField ftFcEnd;
    private javax.swing.JFormattedTextField ftFcStart;
    private javax.swing.JFormattedTextField ftGreenWeight;
    private javax.swing.JFormattedTextField ftRoastDate;
    private javax.swing.JFormattedTextField ftRoastTime;
    private javax.swing.JFormattedTextField ftRoastedWeight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelBeans;
    private javax.swing.JLabel labelBrownTime;
    private javax.swing.JLabel labelChargeTemp;
    private javax.swing.JLabel labelDensity;
    private javax.swing.JLabel labelDevTime;
    private javax.swing.JLabel labelDifference;
    private javax.swing.JLabel labelDifferenceMessage;
    private javax.swing.JLabel labelDryComplete;
    private javax.swing.JLabel labelDryTime;
    private javax.swing.JLabel labelFcEnd;
    private javax.swing.JLabel labelFcStart;
    private javax.swing.JLabel labelFcStart4;
    private javax.swing.JLabel labelFcTime;
    private javax.swing.JLabel labelGreenWeight;
    private javax.swing.JLabel labelMoistureLoss;
    private javax.swing.JLabel labelMoistureLossMessage;
    private javax.swing.JLabel labelRoastDate;
    private javax.swing.JLabel labelRoastLevel;
    private javax.swing.JLabel labelRoastLevelMessage;
    private javax.swing.JLabel labelRoastNotes;
    private javax.swing.JLabel labelRoastTime;
    private javax.swing.JLabel labelRoastedWeight;
    private javax.swing.JLabel labelTotalTime;
    private javax.swing.JPanel panelNotes;
    private javax.swing.JPanel panelRoastInfo;
    private javax.swing.JPanel panelRoastTimes;
    private javax.swing.JTextArea textAreaRoastNotes;
    private javax.swing.JTextArea textAreaTastingNotes;
    private javax.swing.JTextField textRoastId;
    // End of variables declaration//GEN-END:variables

}
