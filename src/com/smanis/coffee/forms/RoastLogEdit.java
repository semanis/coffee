/*
 */
package com.smanis.coffee.forms;

import com.smanis.coffee.AppPreferences;
import com.smanis.coffee.service.DataService;
import com.smanis.coffee.Utility;
import com.smanis.coffee.models.BeanModel;
import com.smanis.coffee.service.TableService;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultFormatterFactory;

/**
 *
 * @author semanis
 */
public class RoastLogEdit extends javax.swing.JDialog {

    /**
     * Creates new form RoastLogEdit
     */
    public RoastLogEdit(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        initOther();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelBean = new javax.swing.JPanel();
        labelBeans = new javax.swing.JLabel();
        textDensity = new javax.swing.JTextField();
        comboBeans = new javax.swing.JComboBox<>();
        labelGreenWeight = new javax.swing.JLabel();
        ftGreenWeight = new JFormattedTextField(Utility.createMaskFormatter("###.#"));
        labelRoastDate = new javax.swing.JLabel();
        ftRoastDate = new JFormattedTextField(Utility.createMaskFormatter("##/##/####"));
        btnRoastDate = new javax.swing.JButton();
        labelStartTime = new javax.swing.JLabel();
        ftStartTime = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        btnStartTime = new javax.swing.JButton();
        labelDryEnd = new javax.swing.JLabel();
        ftDryEnd = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        btnDryEnd = new javax.swing.JButton();
        labelFcStart = new javax.swing.JLabel();
        ftFcStart = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        btnFcStart = new javax.swing.JButton();
        labelFcEnd = new javax.swing.JLabel();
        btnFcEnd = new javax.swing.JButton();
        ftFcEnd = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        labelEndRoast = new javax.swing.JLabel();
        ftEndRoast = new JFormattedTextField(Utility.createMaskFormatter("##:##:##"));
        btnEndRoast = new javax.swing.JButton();
        labelRoastedWeight = new javax.swing.JLabel();
        ftRoastedWeight = new JFormattedTextField(Utility.createMaskFormatter("###.#"));
        labelDifference = new javax.swing.JLabel();
        textDifferenceMsg = new javax.swing.JTextField();
        labelMoistureLoss = new javax.swing.JLabel();
        textMoistureLossMsg = new javax.swing.JTextField();
        labelRoastLevel = new javax.swing.JLabel();
        textRoastLevelMsg = new javax.swing.JTextField();
        panelNotes = new javax.swing.JPanel();
        labelRoastNotes = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaRoastNotes = new javax.swing.JTextArea();
        labelTastingNotes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaTastingNotes = new javax.swing.JTextArea();
        panelOverview = new javax.swing.JPanel();
        labelDryTime = new javax.swing.JLabel();
        textDryTime = new javax.swing.JTextField();
        labelBrowningTime = new javax.swing.JLabel();
        textBrowningTime = new javax.swing.JTextField();
        labelFcDuration = new javax.swing.JLabel();
        textFcDuration = new javax.swing.JTextField();
        labelDevTime = new javax.swing.JLabel();
        textDevTime = new javax.swing.JTextField();
        labelTotalRoastTime = new javax.swing.JLabel();
        textTotalRoastTime = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setTitle("Roast Log Editor");
        setMinimumSize(new java.awt.Dimension(160, 160));
        setName("roastLogEdit"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1236, 805));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelBean.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(panelBean, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 5, -1, -1));

        labelBeans.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelBeans.setText("Bean");
        getContentPane().add(labelBeans, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, -1, -1));

        textDensity.setText(" ");
        textDensity.setFocusable(false);
        getContentPane().add(textDensity, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 70, 70, -1));

        comboBeans.setModel(TableService.getInstance().getComboboxModelBeans());
        comboBeans.setMinimumSize(new java.awt.Dimension(350, 31));
        comboBeans.setNextFocusableComponent(ftRoastDate);
        comboBeans.setPreferredSize(new java.awt.Dimension(350, 31));
        comboBeans.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBeansItemStateChanged(evt);
            }
        });
        comboBeans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                comboBeansKeyTyped(evt);
            }
        });
        getContentPane().add(comboBeans, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 400, -1));

        labelGreenWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelGreenWeight.setText("Green Weight");
        getContentPane().add(labelGreenWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, -1, -1));

        ftGreenWeight.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("###.#")));
        ftGreenWeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ftGreenWeight.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftGreenWeight.setMinimumSize(new java.awt.Dimension(50, 26));
        ftGreenWeight.setNextFocusableComponent(ftRoastedWeight);
        ftGreenWeight.setPreferredSize(new java.awt.Dimension(50, 26));
        ftGreenWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftGreenWeightFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftGreenWeightFocusLost(evt);
            }
        });
        getContentPane().add(ftGreenWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, 110, -1));

        labelRoastDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastDate.setText("Roast Date");
        getContentPane().add(labelRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, -1, -1));

        ftRoastDate.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##/##/####")));
        ftRoastDate.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftRoastDate.setNextFocusableComponent(btnRoastDate);
        ftRoastDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftRoastDateFocusGained(evt);
            }
        });
        getContentPane().add(ftRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 120, -1));

        btnRoastDate.setText("now");
        btnRoastDate.setMaximumSize(new java.awt.Dimension(72, 26));
        btnRoastDate.setMinimumSize(new java.awt.Dimension(72, 26));
        btnRoastDate.setPreferredSize(new java.awt.Dimension(72, 26));
        btnRoastDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoastDateActionPerformed(evt);
            }
        });
        getContentPane().add(btnRoastDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 80, 30));

        labelStartTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelStartTime.setText("Start Time");
        getContentPane().add(labelStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 130, -1));

        ftStartTime.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftStartTime.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftStartTime.setNextFocusableComponent(btnStartTime);
        ftStartTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftStartTimeFocusGained(evt);
            }
        });
        getContentPane().add(ftStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 110, -1));

        btnStartTime.setText("now");
        btnStartTime.setMaximumSize(new java.awt.Dimension(72, 26));
        btnStartTime.setMinimumSize(new java.awt.Dimension(72, 26));
        btnStartTime.setNextFocusableComponent(ftDryEnd);
        btnStartTime.setPreferredSize(new java.awt.Dimension(72, 26));
        btnStartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartTimeActionPerformed(evt);
            }
        });
        getContentPane().add(btnStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 80, 30));

        labelDryEnd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDryEnd.setText("Dry End");
        getContentPane().add(labelDryEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, -1, -1));

        ftDryEnd.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftDryEnd.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftDryEnd.setNextFocusableComponent(btnDryEnd);
        ftDryEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftDryEndFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftDryEndFocusLost(evt);
            }
        });
        getContentPane().add(ftDryEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 110, -1));

        btnDryEnd.setText("now");
        btnDryEnd.setMaximumSize(new java.awt.Dimension(72, 26));
        btnDryEnd.setMinimumSize(new java.awt.Dimension(72, 26));
        btnDryEnd.setNextFocusableComponent(ftFcStart);
        btnDryEnd.setPreferredSize(new java.awt.Dimension(72, 26));
        btnDryEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDryEndActionPerformed(evt);
            }
        });
        getContentPane().add(btnDryEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 80, -1));

        labelFcStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelFcStart.setText("FC Start");
        getContentPane().add(labelFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, -1, -1));

        ftFcStart.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftFcStart.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftFcStart.setNextFocusableComponent(btnFcStart);
        ftFcStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftFcStartFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftFcStartFocusLost(evt);
            }
        });
        getContentPane().add(ftFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, 110, -1));

        btnFcStart.setText("now");
        btnFcStart.setMaximumSize(new java.awt.Dimension(72, 26));
        btnFcStart.setMinimumSize(new java.awt.Dimension(72, 26));
        btnFcStart.setPreferredSize(new java.awt.Dimension(72, 26));
        btnFcStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFcStartActionPerformed(evt);
            }
        });
        getContentPane().add(btnFcStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 240, 80, -1));

        labelFcEnd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelFcEnd.setText("FC End");
        getContentPane().add(labelFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, -1, -1));

        btnFcEnd.setText("now");
        btnFcEnd.setMaximumSize(new java.awt.Dimension(72, 26));
        btnFcEnd.setMinimumSize(new java.awt.Dimension(72, 26));
        btnFcEnd.setNextFocusableComponent(ftEndRoast);
        btnFcEnd.setPreferredSize(new java.awt.Dimension(72, 26));
        btnFcEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFcEndActionPerformed(evt);
            }
        });
        getContentPane().add(btnFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 80, -1));

        ftFcEnd.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftFcEnd.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftFcEnd.setNextFocusableComponent(btnFcEnd);
        ftFcEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftFcEndFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftFcEndFocusLost(evt);
            }
        });
        getContentPane().add(ftFcEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 110, -1));

        labelEndRoast.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelEndRoast.setText("End Roast");
        getContentPane().add(labelEndRoast, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, -1, -1));

        ftEndRoast.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("##:##:##")));
        ftEndRoast.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftEndRoast.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftEndRoastFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftEndRoastFocusLost(evt);
            }
        });
        getContentPane().add(ftEndRoast, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 110, -1));

        btnEndRoast.setText("now");
        btnEndRoast.setMaximumSize(new java.awt.Dimension(72, 26));
        btnEndRoast.setMinimumSize(new java.awt.Dimension(72, 26));
        btnEndRoast.setNextFocusableComponent(ftGreenWeight);
        btnEndRoast.setPreferredSize(new java.awt.Dimension(72, 26));
        btnEndRoast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndRoastActionPerformed(evt);
            }
        });
        getContentPane().add(btnEndRoast, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, 80, -1));

        labelRoastedWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastedWeight.setText("Roasted Weight");
        getContentPane().add(labelRoastedWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, -1, -1));

        ftRoastedWeight.setFormatterFactory(new DefaultFormatterFactory(Utility.getMaskFormatter("###.#")));
        ftRoastedWeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ftRoastedWeight.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        ftRoastedWeight.setMinimumSize(new java.awt.Dimension(50, 26));
        ftRoastedWeight.setPreferredSize(new java.awt.Dimension(50, 26));
        ftRoastedWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ftRoastedWeightFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ftRoastedWeightFocusLost(evt);
            }
        });
        getContentPane().add(ftRoastedWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 430, 110, -1));

        labelDifference.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDifference.setText("Difference");
        getContentPane().add(labelDifference, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 470, -1, -1));

        textDifferenceMsg.setText("   ");
        textDifferenceMsg.setFocusable(false);
        getContentPane().add(textDifferenceMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 470, 110, -1));

        labelMoistureLoss.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelMoistureLoss.setText("Moisture Loss");
        labelMoistureLoss.setAlignmentY(0.0F);
        getContentPane().add(labelMoistureLoss, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 510, -1, -1));

        textMoistureLossMsg.setText(" ");
        textMoistureLossMsg.setFocusable(false);
        getContentPane().add(textMoistureLossMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 510, 110, -1));

        labelRoastLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRoastLevel.setText("Roast Level");
        getContentPane().add(labelRoastLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 550, -1, -1));

        textRoastLevelMsg.setFocusable(false);
        textRoastLevelMsg.setMaximumSize(new java.awt.Dimension(350, 26));
        textRoastLevelMsg.setMinimumSize(new java.awt.Dimension(350, 26));
        textRoastLevelMsg.setPreferredSize(new java.awt.Dimension(350, 26));
        getContentPane().add(textRoastLevelMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 550, 360, -1));

        panelNotes.setBorder(javax.swing.BorderFactory.createTitledBorder(" Notes "));
        panelNotes.setLayout(new java.awt.GridBagLayout());

        labelRoastNotes.setText("Roast");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        panelNotes.add(labelRoastNotes, gridBagConstraints);

        jScrollPane3.setHorizontalScrollBar(null);
        jScrollPane3.setMaximumSize(new java.awt.Dimension(343, 113));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(343, 113));

        textAreaRoastNotes.setColumns(20);
        textAreaRoastNotes.setLineWrap(true);
        textAreaRoastNotes.setRows(5);
        jScrollPane3.setViewportView(textAreaRoastNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        panelNotes.add(jScrollPane3, gridBagConstraints);

        labelTastingNotes.setText("Tasting");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panelNotes.add(labelTastingNotes, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBar(null);

        textAreaTastingNotes.setColumns(20);
        textAreaTastingNotes.setLineWrap(true);
        textAreaTastingNotes.setRows(5);
        jScrollPane1.setViewportView(textAreaTastingNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        panelNotes.add(jScrollPane1, gridBagConstraints);

        getContentPane().add(panelNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 390, 520));

        panelOverview.setBorder(javax.swing.BorderFactory.createTitledBorder(" Overview "));
        panelOverview.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelDryTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDryTime.setText("Dry Time");
        panelOverview.add(labelDryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, -1));

        textDryTime.setText(" ");
        textDryTime.setFocusable(false);
        panelOverview.add(textDryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 120, -1));

        labelBrowningTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelBrowningTime.setText("Browning Time");
        panelOverview.add(labelBrowningTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        textBrowningTime.setText(" ");
        textBrowningTime.setFocusable(false);
        panelOverview.add(textBrowningTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 120, -1));

        labelFcDuration.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelFcDuration.setText("FC Duration");
        panelOverview.add(labelFcDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, -1, -1));

        textFcDuration.setText(" ");
        textFcDuration.setFocusable(false);
        panelOverview.add(textFcDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 120, -1));

        labelDevTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDevTime.setText("Development Time");
        panelOverview.add(labelDevTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        textDevTime.setText(" ");
        textDevTime.setFocusable(false);
        panelOverview.add(textDevTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 120, -1));

        labelTotalRoastTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalRoastTime.setText("Total Roast Time");
        panelOverview.add(labelTotalRoastTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        textTotalRoastTime.setText(" ");
        textTotalRoastTime.setFocusable(false);
        panelOverview.add(textTotalRoastTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, 120, -1));

        getContentPane().add(panelOverview, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 60, 400, 520));

        btnCancel.setMnemonic('c');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 600, -1, -1));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 600, -1, -1));

        setSize(new java.awt.Dimension(1452, 674));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRoastDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoastDateActionPerformed
        Utility.verifyOverwriteDate(this.ftRoastDate);
    }//GEN-LAST:event_btnRoastDateActionPerformed

    private void ftGreenWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftGreenWeightFocusLost
        this.calculateMoistureLoss();
    }//GEN-LAST:event_ftGreenWeightFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.exitForm();
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.exitForm();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartTimeActionPerformed
        Utility.verifyOverwriteTime(this.ftStartTime);
    }//GEN-LAST:event_btnStartTimeActionPerformed

    private void btnEndRoastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndRoastActionPerformed
        Utility.verifyOverwriteTime(this.ftEndRoast);
    }//GEN-LAST:event_btnEndRoastActionPerformed

    private void btnFcEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFcEndActionPerformed
        Utility.verifyOverwriteTime(this.ftFcEnd);

        this.calculateTotalFirstCrackTime();
    }//GEN-LAST:event_btnFcEndActionPerformed

    private void btnFcStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFcStartActionPerformed
        Utility.verifyOverwriteTime(this.ftFcStart);

        this.calculateTotalFirstCrackTime();
    }//GEN-LAST:event_btnFcStartActionPerformed

    private void btnDryEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDryEndActionPerformed
        Utility.verifyOverwriteTime(this.ftDryEnd);

        this.calculateTotalDryTime();
    }//GEN-LAST:event_btnDryEndActionPerformed

    private void ftDryEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftDryEndFocusLost
        this.calculateTotalDryTime();
    }//GEN-LAST:event_ftDryEndFocusLost

    private void ftFcStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcStartFocusLost
        this.calculateTotalFirstCrackTime();
        this.calculateBrowningTime();
    }//GEN-LAST:event_ftFcStartFocusLost

    private void ftFcEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcEndFocusLost
        this.calculateTotalFirstCrackTime();
    }//GEN-LAST:event_ftFcEndFocusLost

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.persistRoastLog();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void ftGreenWeightFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftGreenWeightFocusGained
        Utility.selectAll(this.ftGreenWeight);
    }//GEN-LAST:event_ftGreenWeightFocusGained

    private void ftStartTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftStartTimeFocusGained
        Utility.selectAll(this.ftStartTime);
    }//GEN-LAST:event_ftStartTimeFocusGained

    private void ftDryEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftDryEndFocusGained
        Utility.selectAll(this.ftDryEnd);       
        
    }//GEN-LAST:event_ftDryEndFocusGained

    private void ftFcStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcStartFocusGained
        Utility.selectAll(this.ftFcStart);
    }//GEN-LAST:event_ftFcStartFocusGained

    private void ftFcEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftFcEndFocusGained
        Utility.selectAll(this.ftFcEnd);
    }//GEN-LAST:event_ftFcEndFocusGained

    private void ftEndRoastFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftEndRoastFocusGained
        Utility.selectAll(this.ftEndRoast);
    }//GEN-LAST:event_ftEndRoastFocusGained

    private void comboBeansItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBeansItemStateChanged
        if (evt.getStateChange() != evt.SELECTED) {
            return;
        }

        BeanModel bm = (BeanModel) evt.getItem();
        if (bm == null) {
            return;
        }

        this.setBeanDensity(bm.getBeanDensity());
    }//GEN-LAST:event_comboBeansItemStateChanged

    private void ftRoastedWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastedWeightFocusLost
        this.calculateMoistureLoss();
    }//GEN-LAST:event_ftRoastedWeightFocusLost

    private void ftEndRoastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftEndRoastFocusLost
        this.calculateTotalRoastTime();
        this.calculateDevelopmentTime();
    }//GEN-LAST:event_ftEndRoastFocusLost

    private void ftRoastDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastDateFocusGained
        Utility.selectAll(this.ftRoastDate);
    }//GEN-LAST:event_ftRoastDateFocusGained

    private void ftRoastedWeightFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ftRoastedWeightFocusGained
        Utility.selectAll(this.ftRoastedWeight);
    }//GEN-LAST:event_ftRoastedWeightFocusGained

    private void comboBeansKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboBeansKeyTyped
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            this.comboBeans.getNextFocusableComponent().requestFocusInWindow();
        }
    }//GEN-LAST:event_comboBeansKeyTyped


    private void calculateBrowningTime() {
        if (Utility.isEmptyTime(this.ftDryEnd) || Utility.isEmptyTime(this.ftFcStart)) {
            return;
        }

        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftDryEnd, this.ftFcStart);

        this.textBrowningTime.setText(timeDeltaString);
    }

    private void calculateDevelopmentTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftFcEnd, this.ftEndRoast);

        this.textDevTime.setText(timeDeltaString);
    }

    /**
     * Calculates the Moisture Loss percentage and the Roast Level.
     */
    private void calculateMoistureLoss() {
        if (Utility.isEmptyWeight(ftGreenWeight) || Utility.isEmptyWeight(ftRoastedWeight)) {
            return;
        }

        float greenWeight = Float.parseFloat((String) this.ftGreenWeight.getValue());
        float roastedWeight = Float.parseFloat((String) this.ftRoastedWeight.getValue());

        float moistureLossPercentage = ((greenWeight - roastedWeight) / greenWeight) * 100;
        String stringPercentage = String.format("%4.1f", moistureLossPercentage);
        moistureLossPercentage = Float.parseFloat(stringPercentage);

        this.textDifferenceMsg.setText(String.format("%.1f", greenWeight - roastedWeight) + "g");
        this.textMoistureLossMsg.setText(String.format("%.1f", moistureLossPercentage) + "%");

        this.calculateRoastLevel(moistureLossPercentage);

    }

    /**
     * Calculates the roast level, I split the difference between roast level
     * values, and if you're at or below the halfway point, you stay at the
     * lower roast level. If you're over the halfway point, I bump you up to the
     * next roast level.
     *
     * e.g., A perfect City Plus is 13.3% moisture loss A perfect Full City is
     * 14.5% moisture loss
     *
     * There's 1.2% difference between these roast levels.
     *
     * Half of that would be .6%.
     *
     * So if the moisture loss for a roast is 13.9% or less, it will be graded
     * as a City Plus. If the moisture loss was 14%, you'd be bumped up to a
     * Full City.
     *
     * @param percentage A moisture loss percentage value.
     */
    private void calculateRoastLevel(float percentage) {
        String roastLevel = "";

        if (percentage <= 12.1) {
            roastLevel = "City Minus / Cinnamon roast";
        } else if (percentage <= 13.0f) {
            roastLevel = "City / Light roast";
        } else if (percentage <= 13.9f) {
            roastLevel = "City Plus / Light-Medium roast";
        } else if (percentage <= 14.8f) {
            roastLevel = "Full City / Full Medium roast";
        } else if (percentage <= 15.3f) {
            roastLevel = "Full City Plus / Medium-Dark roast";
        } else if (percentage <= 16.1f) {
            roastLevel = "French Roast";
        } else if (percentage >= 16.2f) {
            roastLevel = "Burnt?";
        }

        this.textRoastLevelMsg.setText(roastLevel);
    }

    /**
     * Calculates and displays the Total Dry time to the right of the Dry
     * Complete field.
     */
    private void calculateTotalDryTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftStartTime, this.ftDryEnd);

        this.textDryTime.setText(timeDeltaString);
    }

    private void calculateTotalRoastTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftStartTime, this.ftEndRoast);

        this.textTotalRoastTime.setText(timeDeltaString);
    }

    /**
     * Calculates and displays the total FC time to the right of the FC fields.
     */
    private void calculateTotalFirstCrackTime() {
        String timeDeltaString = Utility.getTimeDeltaString(this.ftRoastDate, this.ftFcStart, this.ftFcEnd);

        this.textFcDuration.setText(timeDeltaString);
    }

    /**
     * This method is invoked during the WindowClosing event or if you press the
     * Exit button. This ensure that the appropriate exit logic is handled where
     * you click the X to close the window, or click the Exit button.
     */
    private void exitForm() {
        AppPreferences.saveWindowPreferences(this);

        this.setVisible(false);
    }

    /**
     * Loads database ResultSet data into the editing form fields.
     *
     * @param rs The target ResultSet.
     */
    private void loadDataFromResultSet(ResultSet rs) {

        // Now load the resultset data into the appropriate fields.
        try {
            this.roastId = (String)rs.getString("Id");
            this.ftRoastDate.setValue(Utility.sqlDateToString(rs.getDate("RoastStart"), "MM/dd/yyyy"));
            this.ftStartTime.setValue(Utility.sqlDateToString(rs.getDate("RoastStart"), "HH:mm:ss"));
            // this.ftChargeTemp.setText(rs.getString("ChargeTemp"));
            this.ftGreenWeight.setValue(Utility.sqlFloatToString(rs.getFloat("GreenWeight"), "%05.1f"));
            this.ftRoastedWeight.setValue(Utility.sqlFloatToString(rs.getFloat("RoastedWeight"), "%05.1f"));
            this.ftDryEnd.setValue(Utility.sqlDateToString(rs.getDate("DryTime"), "HH:mm:ss"));
            this.ftFcStart.setValue(Utility.sqlDateToString(rs.getDate("FirstCrackStart"), "HH:mm:ss"));
            this.ftFcEnd.setValue(Utility.sqlDateToString(rs.getDate("FirstCrackEnd"), "HH:mm:ss"));
            this.ftEndRoast.setValue(Utility.sqlDateToString(rs.getDate("EndRoast"), "HH:mm:ss"));
            this.textAreaRoastNotes.setText(rs.getString("RoastNotes"));
            this.textAreaTastingNotes.setText(rs.getString("TastingNotes"));

        } catch (SQLException e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage());
        }
    }

    /**
     * Persists the RoastLog being edited to the database.
     */
    private void persistRoastLog() {
        String roastDate = (String) this.ftRoastDate.getValue();
        String roastTime = (String) this.ftStartTime.getValue();
        BeanModel beanModel = (BeanModel) this.comboBeans.getSelectedItem();
        //String chargeTemp = this.ftChargeTemp.getText();

        String stringGreenWeight = (String) this.ftGreenWeight.getValue();
        float greenWeight = 0.0f;

        if (stringGreenWeight != null) {
            greenWeight = Float.parseFloat(stringGreenWeight);
        }

        String stringRoastedWeight = (String) this.ftRoastedWeight.getValue();
        float roastedWeight = 0.0f;

        if (stringRoastedWeight != null) {
            roastedWeight = Float.parseFloat(stringRoastedWeight);
        }

        String dryTime = (String) this.ftDryEnd.getValue();
        String firstCrackStart = (String) this.ftFcStart.getValue();
        String firstCrackEnd = (String) this.ftFcEnd.getValue();
        String endRoast = (String) this.ftEndRoast.getValue();
        String roastNotes = this.textAreaRoastNotes.getText();
        String tastingNotes = this.textAreaTastingNotes.getText();

       //&& Utility.validateField(this.ftChargeTemp, "Charge Temp.", "string")

       if (!(beanModel != null
                && Utility.validateField(this.ftRoastDate, "Roast Date", "date")
                && Utility.validateField(this.ftStartTime, "Roast Time", "time")
                && Utility.validateField(this.ftGreenWeight, "Green Weight", "weight")
                && Utility.validateField(this.ftRoastedWeight, "Roasted Weight", "weight")
                && Utility.validateField(this.ftDryEnd, "Dry End Time", "time")
                && Utility.validateField(this.ftFcStart, "First Crack Time", "time")
                && Utility.validateField(this.ftFcEnd, "First Crack End Time", "time")
                && Utility.validateField(this.ftEndRoast, "End Roast Time", "time"))) {

            return;
        }

        String iso8601Date = Utility.dateMdyToYmd(roastDate);

        HashMap<String, Object> map = new HashMap<String,Object>();
        map.put("Id", this.roastId);
        map.put("BeanId", beanModel.getBeanId());
        map.put("RoastStart", iso8601Date + " " + roastTime);
        // map.put("ChargeTemp", chargeTemp);
        map.put("GreenWeight", greenWeight);
        map.put("RoastedWeight", roastedWeight);
        map.put("DryTime", iso8601Date + " " + dryTime);
        map.put("FirstCrackStart", iso8601Date + " " + firstCrackStart);
        map.put("FirstCrackEnd", iso8601Date + " " + firstCrackEnd);
        map.put("EndRoast", iso8601Date + " " + endRoast);
        map.put("RoastNotes", roastNotes);
        map.put("TastingNotes", tastingNotes);

        try {
            // if Id is null, it's a new Roast Log.
            String roastId = (String)map.get("Id");
            if (roastId.equals(null) || roastId.equals("")) {
                DataService.getInstance().insertRoastLog(map);
                this.wasInserted = true;
            } else {
                // otherwise, you're editing.
                DataService.getInstance().updateRoastLog(map);
                this.wasUpdated = true;
            }

            JOptionPane.showMessageDialog(this, "Saved.", "Roast Log Saved", JOptionPane.INFORMATION_MESSAGE);

            this.wasPersisted = true;
            
            this.exitForm();
        } catch (Exception e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, e.getMessage(), e);
        }
    }

    /**
     * Sets the Bean Density message, which is a label that appears beneath the
     * bean combobox.
     *
     * @param beanDensity A String bean density value, e.g. "0.72".
     */
    private void setBeanDensity(String beanDensity) {
        this.textDensity.setText(beanDensity);
    }

    // Allows the caller to set a Roast Log ID that you want to edit.  
    // This component handles the details of loading/transforming that data from
    // the database.
    public void setRoastLogId(String id) {
        this.roastId = id;

        try {
            ResultSet rs = DataService.getInstance().getRoastLogById(id);

            if (rs.next()) {
                // The Id of the Bean to set as the combo's initial selection.
                String targetBeanId = rs.getString("BeanId");

                // first, set the combobox selection to match the bean we're editing.
                DefaultComboBoxModel model = (DefaultComboBoxModel) this.comboBeans.getModel();
                int rows = model.getSize();

                BeanModel bm = null;
                for (int i = 0; i < rows; i++) {
                    bm = (BeanModel) model.getElementAt(i);
                    if (bm.getBeanId().equals(targetBeanId)) {
                        this.comboBeans.setSelectedIndex(i);
                        this.setBeanDensity(bm.getBeanDensity());
                        break;
                    }
                }

                this.loadDataFromResultSet(rs);

                // Adds total time message after the appropriate fields and
                // creates the moisture loss values/messages.
                this.calculateMoistureLoss();
                this.calculateTotalDryTime();
                this.calculateBrowningTime();
                this.calculateTotalFirstCrackTime();
                this.calculateDevelopmentTime();
                this.calculateTotalRoastTime();

            } else {
                // You should never get here, but I'm a touch anal with error handling.
                JOptionPane.showMessageDialog(this, "No Roast Log found for ID '" + this.roastId + "'.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            Logger.getLogger(RoastLogEdit.class.getName()).log(Level.SEVERE, "setRoastLogId(String id) " + e.getMessage());
        }

    }

    //
    //============[ Custom  Init ]===================================================================
    //
    private void initOther() {
        JRootPane jrp = this.getRootPane();
        // jrp.setDefaultButton(this.btnSave);

        // Register an action listener on the Escape key which performs a click of the Exit button.
        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                int response = JOptionPane.showConfirmDialog(RoastLogEdit.this, "Cancel editing?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
                if (response == JOptionPane.OK_OPTION) {
                    btnCancel.doClick();
                }
            }
        };

        // Bind the Escape key to fire the action listener.    
        KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        jrp.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);

        AppPreferences.loadWindowPreferences(RoastLogEdit.this);

        this.comboBeans.setMaximumRowCount(15);        
        this.comboBeans.setSelectedIndex(0);
        BeanModel model = (BeanModel)this.comboBeans.getSelectedItem();
        this.textDensity.setText(model.getBeanDensity());
        
        

// Display current timer every second as HH:mm:ss in the JFrame title.
        
        //DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a");

        // Timer displays the current time (formatted above))) in the window title and updates once a second.
//        this.timer = new Timer(1000, new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent ae) {
//                setTitle("Roast Log Editor - " + dtf.format(LocalTime.now()));
//            }
//        });
//
//        timer.setRepeats(true);
//        timer.start();
    }

    //
    //============[ Sub-Classes]=====================================================================
    //
    private String roastId = "";
    public Boolean wasPersisted = false;
    public Boolean wasUpdated = false;
    public Boolean wasInserted = false;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDryEnd;
    private javax.swing.JButton btnEndRoast;
    private javax.swing.JButton btnFcEnd;
    private javax.swing.JButton btnFcStart;
    private javax.swing.JButton btnRoastDate;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStartTime;
    private javax.swing.JComboBox<String> comboBeans;
    private javax.swing.JFormattedTextField ftDryEnd;
    private javax.swing.JFormattedTextField ftEndRoast;
    private javax.swing.JFormattedTextField ftFcEnd;
    private javax.swing.JFormattedTextField ftFcStart;
    private javax.swing.JFormattedTextField ftGreenWeight;
    private javax.swing.JFormattedTextField ftRoastDate;
    private javax.swing.JFormattedTextField ftRoastedWeight;
    private javax.swing.JFormattedTextField ftStartTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelBeans;
    private javax.swing.JLabel labelBrowningTime;
    private javax.swing.JLabel labelDevTime;
    private javax.swing.JLabel labelDifference;
    private javax.swing.JLabel labelDryEnd;
    private javax.swing.JLabel labelDryTime;
    private javax.swing.JLabel labelEndRoast;
    private javax.swing.JLabel labelFcDuration;
    private javax.swing.JLabel labelFcEnd;
    private javax.swing.JLabel labelFcStart;
    private javax.swing.JLabel labelGreenWeight;
    private javax.swing.JLabel labelMoistureLoss;
    private javax.swing.JLabel labelRoastDate;
    private javax.swing.JLabel labelRoastLevel;
    private javax.swing.JLabel labelRoastNotes;
    private javax.swing.JLabel labelRoastedWeight;
    private javax.swing.JLabel labelStartTime;
    private javax.swing.JLabel labelTastingNotes;
    private javax.swing.JLabel labelTotalRoastTime;
    private javax.swing.JPanel panelBean;
    private javax.swing.JPanel panelNotes;
    private javax.swing.JPanel panelOverview;
    private javax.swing.JTextArea textAreaRoastNotes;
    private javax.swing.JTextArea textAreaTastingNotes;
    private javax.swing.JTextField textBrowningTime;
    private javax.swing.JTextField textDensity;
    private javax.swing.JTextField textDevTime;
    private javax.swing.JTextField textDifferenceMsg;
    private javax.swing.JTextField textDryTime;
    private javax.swing.JTextField textFcDuration;
    private javax.swing.JTextField textMoistureLossMsg;
    private javax.swing.JTextField textRoastLevelMsg;
    private javax.swing.JTextField textTotalRoastTime;
    // End of variables declaration//GEN-END:variables

}
